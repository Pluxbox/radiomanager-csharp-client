/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RadioManager.Client;
using RadioManager.Api;
using RadioManager.Model;

namespace RadioManager.Test
{
    /// <summary>
    ///  Class for testing ContactApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ContactApiTests
    {
        private ContactApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContactApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContactApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ContactApi
            //Assert.IsInstanceOfType(typeof(ContactApi), instance, "instance is a ContactApi");
        }

        
        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Test]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContactDataInput data = null;
            //var response = instance.CreateContact(data);
            //Assert.IsInstanceOf<PostSuccess> (response, "response is PostSuccess");
        }
        
        /// <summary>
        /// Test DeleteContactById
        /// </summary>
        [Test]
        public void DeleteContactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeleteContactById(id);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test GetContactById
        /// </summary>
        [Test]
        public void GetContactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? externalStationId = null;
            //var response = instance.GetContactById(id, externalStationId);
            //Assert.IsInstanceOf<ContactResult> (response, "response is ContactResult");
        }
        
        /// <summary>
        /// Test ListContacts
        /// </summary>
        [Test]
        public void ListContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? modelTypeId = null;
            //long? tagId = null;
            //long? itemId = null;
            //long? externalStationId = null;
            //var response = instance.ListContacts(page, modelTypeId, tagId, itemId, externalStationId);
            //Assert.IsInstanceOf<ContactResults> (response, "response is ContactResults");
        }
        
        /// <summary>
        /// Test UpdateContactByID
        /// </summary>
        [Test]
        public void UpdateContactByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //ContactDataInput data = null;
            //var response = instance.UpdateContactByID(id, data);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
    }

}
