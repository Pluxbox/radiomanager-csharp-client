/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RadioManager.Client;
using RadioManager.Api;
using RadioManager.Model;

namespace RadioManager.Test
{
    /// <summary>
    ///  Class for testing BroadcastApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BroadcastApiTests
    {
        private BroadcastApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BroadcastApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BroadcastApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BroadcastApi
            //Assert.IsInstanceOfType(typeof(BroadcastApi), instance, "instance is a BroadcastApi");
        }

        
        /// <summary>
        /// Test CreateBroadcast
        /// </summary>
        [Test]
        public void CreateBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BroadcastDataInput data = null;
            //var response = instance.CreateBroadcast(data);
            //Assert.IsInstanceOf<PostSuccess> (response, "response is PostSuccess");
        }
        
        /// <summary>
        /// Test DeleteBroadcastById
        /// </summary>
        [Test]
        public void DeleteBroadcastByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeleteBroadcastById(id);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test GetBroadcastById
        /// </summary>
        [Test]
        public void GetBroadcastByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? externalStationId = null;
            //var response = instance.GetBroadcastById(id, externalStationId);
            //Assert.IsInstanceOf<BroadcastResult> (response, "response is BroadcastResult");
        }
        
        /// <summary>
        /// Test GetCurrentBroadcast
        /// </summary>
        [Test]
        public void GetCurrentBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentBroadcast();
            //Assert.IsInstanceOf<Broadcast> (response, "response is Broadcast");
        }
        
        /// <summary>
        /// Test GetDailyEPG
        /// </summary>
        [Test]
        public void GetDailyEPGTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? date = null;
            //var response = instance.GetDailyEPG(date);
            //Assert.IsInstanceOf<EPGBroadcast> (response, "response is EPGBroadcast");
        }
        
        /// <summary>
        /// Test GetEPGByDate
        /// </summary>
        [Test]
        public void GetEPGByDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? date = null;
            //var response = instance.GetEPGByDate(date);
            //Assert.IsInstanceOf<EPGBroadcast> (response, "response is EPGBroadcast");
        }
        
        /// <summary>
        /// Test GetNextBroadcast
        /// </summary>
        [Test]
        public void GetNextBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetNextBroadcast();
            //Assert.IsInstanceOf<Broadcast> (response, "response is Broadcast");
        }
        
        /// <summary>
        /// Test GetWeeklyEPG
        /// </summary>
        [Test]
        public void GetWeeklyEPGTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //var response = instance.GetWeeklyEPG(date);
            //Assert.IsInstanceOf<EPGBroadcast> (response, "response is EPGBroadcast");
        }
        
        /// <summary>
        /// Test ListBroadcasts
        /// </summary>
        [Test]
        public void ListBroadcastsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //DateTime? startMin = null;
            //DateTime? startMax = null;
            //long? modelTypeId = null;
            //long? tagId = null;
            //long? presenterId = null;
            //long? itemId = null;
            //long? blockId = null;
            //long? genreId = null;
            //long? programId = null;
            //long? externalStationId = null;
            //var response = instance.ListBroadcasts(page, startMin, startMax, modelTypeId, tagId, presenterId, itemId, blockId, genreId, programId, externalStationId);
            //Assert.IsInstanceOf<BroadcastResults> (response, "response is BroadcastResults");
        }
        
        /// <summary>
        /// Test PrintBroadcastById
        /// </summary>
        [Test]
        public void PrintBroadcastByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? programId = null;
            //long? presenterId = null;
            //long? tagId = null;
            //var response = instance.PrintBroadcastById(id, programId, presenterId, tagId);
            //Assert.IsInstanceOf<EPGBroadcast> (response, "response is EPGBroadcast");
        }
        
        /// <summary>
        /// Test UpdateBroadcastByID
        /// </summary>
        [Test]
        public void UpdateBroadcastByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //BroadcastDataInput data = null;
            //var response = instance.UpdateBroadcastByID(id, data);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
    }

}
