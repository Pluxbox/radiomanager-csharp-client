/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RadioManager.Client;
using RadioManager.Api;
using RadioManager.Model;

namespace RadioManager.Test
{
    /// <summary>
    ///  Class for testing BroadcastApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BroadcastApiTests
    {
        private BroadcastApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BroadcastApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BroadcastApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BroadcastApi
            //Assert.IsInstanceOfType(typeof(BroadcastApi), instance, "instance is a BroadcastApi");
        }

        /// <summary>
        /// Test CreateBroadcast
        /// </summary>
        [Test]
        public void CreateBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BroadcastDataInput body = null;
            //var response = instance.CreateBroadcast(body);
            //Assert.IsInstanceOf<PostSuccess> (response, "response is PostSuccess");
        }
        /// <summary>
        /// Test DeleteBroadcastById
        /// </summary>
        [Test]
        public void DeleteBroadcastByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeleteBroadcastById(id);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        /// <summary>
        /// Test GetBroadcastById
        /// </summary>
        [Test]
        public void GetBroadcastByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? externalStationId = null;
            //var response = instance.GetBroadcastById(id, externalStationId);
            //Assert.IsInstanceOf<BroadcastResult> (response, "response is BroadcastResult");
        }
        /// <summary>
        /// Test GetCurrentBroadcast
        /// </summary>
        [Test]
        public void GetCurrentBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? withunpublished = null;
            //var response = instance.GetCurrentBroadcast(withunpublished);
            //Assert.IsInstanceOf<BroadcastResult> (response, "response is BroadcastResult");
        }
        /// <summary>
        /// Test GetDailyEPG
        /// </summary>
        [Test]
        public void GetDailyEPGTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? date = null;
            //bool? withunpublished = null;
            //var response = instance.GetDailyEPG(date, withunpublished);
            //Assert.IsInstanceOf<EPGResults> (response, "response is EPGResults");
        }
        /// <summary>
        /// Test GetEPGByDate
        /// </summary>
        [Test]
        public void GetEPGByDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? date = null;
            //bool? withunpublished = null;
            //var response = instance.GetEPGByDate(date, withunpublished);
            //Assert.IsInstanceOf<EPGResults> (response, "response is EPGResults");
        }
        /// <summary>
        /// Test GetNextBroadcast
        /// </summary>
        [Test]
        public void GetNextBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? withunpublished = null;
            //var response = instance.GetNextBroadcast(withunpublished);
            //Assert.IsInstanceOf<BroadcastResult> (response, "response is BroadcastResult");
        }
        /// <summary>
        /// Test GetWeeklyEPG
        /// </summary>
        [Test]
        public void GetWeeklyEPGTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //bool? withunpublished = null;
            //var response = instance.GetWeeklyEPG(date, withunpublished);
            //Assert.IsInstanceOf<EPGResults> (response, "response is EPGResults");
        }
        /// <summary>
        /// Test ListBroadcasts
        /// </summary>
        [Test]
        public void ListBroadcastsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? programId = null;
            //long? blockId = null;
            //long? modelTypeId = null;
            //long? tagId = null;
            //long? presenterId = null;
            //long? genreId = null;
            //long? itemId = null;
            //DateTime? startMin = null;
            //DateTime? startMax = null;
            //long? limit = null;
            //string orderBy = null;
            //string orderDirection = null;
            //long? externalStationId = null;
            //var response = instance.ListBroadcasts(page, programId, blockId, modelTypeId, tagId, presenterId, genreId, itemId, startMin, startMax, limit, orderBy, orderDirection, externalStationId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test PrintBroadcastById
        /// </summary>
        [Test]
        public void PrintBroadcastByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? templateId = null;
            //var response = instance.PrintBroadcastById(id, templateId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test UpdateBroadcastByID
        /// </summary>
        [Test]
        public void UpdateBroadcastByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //BroadcastDataInput body = null;
            //var response = instance.UpdateBroadcastByID(id, body);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
    }

}
