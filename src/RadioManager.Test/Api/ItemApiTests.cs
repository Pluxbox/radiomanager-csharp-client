/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RadioManager.Client;
using RadioManager.Api;
using RadioManager.Model;

namespace RadioManager.Test
{
    /// <summary>
    ///  Class for testing ItemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemApiTests
    {
        private ItemApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemApi
            //Assert.IsInstanceOfType(typeof(ItemApi), instance, "instance is a ItemApi");
        }

        
        /// <summary>
        /// Test CreateItem
        /// </summary>
        [Test]
        public void CreateItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemDataInput data = null;
            //var response = instance.CreateItem(data);
            //Assert.IsInstanceOf<PostSuccess> (response, "response is PostSuccess");
        }
        
        /// <summary>
        /// Test CurrentItemPostStructure
        /// </summary>
        [Test]
        public void CurrentItemPostStructureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImportItem data = null;
            //var response = instance.CurrentItemPostStructure(data);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test CurrentItemPostTiming
        /// </summary>
        [Test]
        public void CurrentItemPostTimingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImportItem data = null;
            //var response = instance.CurrentItemPostTiming(data);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test DeleteItemById
        /// </summary>
        [Test]
        public void DeleteItemByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeleteItemById(id);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test GetItemById
        /// </summary>
        [Test]
        public void GetItemByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? externalStationId = null;
            //var response = instance.GetItemById(id, externalStationId);
            //Assert.IsInstanceOf<ItemResult> (response, "response is ItemResult");
        }
        
        /// <summary>
        /// Test ListItems
        /// </summary>
        [Test]
        public void ListItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? blockId = null;
            //long? broadcastId = null;
            //long? modelTypeId = null;
            //long? tagId = null;
            //long? campaignId = null;
            //long? contactId = null;
            //long? programDraftId = null;
            //long? userDraftId = null;
            //long? stationDraftId = null;
            //long? programId = null;
            //DateTime? startMin = null;
            //DateTime? startMax = null;
            //int? durationMin = null;
            //int? durationMax = null;
            //string status = null;
            //long? limit = null;
            //string orderBy = null;
            //string orderDirection = null;
            //long? externalStationId = null;
            //var response = instance.ListItems(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId);
            //Assert.IsInstanceOf<ItemResults> (response, "response is ItemResults");
        }
        
        /// <summary>
        /// Test PlaylistPostStructure
        /// </summary>
        [Test]
        public void PlaylistPostStructureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Data1 data = null;
            //var response = instance.PlaylistPostStructure(data);
            //Assert.IsInstanceOf<InlineResponse202> (response, "response is InlineResponse202");
        }
        
        /// <summary>
        /// Test PlaylistPostTiming
        /// </summary>
        [Test]
        public void PlaylistPostTimingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Data data = null;
            //var response = instance.PlaylistPostTiming(data);
            //Assert.IsInstanceOf<InlineResponse202> (response, "response is InlineResponse202");
        }
        
        /// <summary>
        /// Test UpdateItemById
        /// </summary>
        [Test]
        public void UpdateItemByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //ItemDataInput data = null;
            //var response = instance.UpdateItemById(id, data);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
    }

}
