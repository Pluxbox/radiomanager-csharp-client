/* 
 * RadioManager
 *
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RadioManager.Client;
using RadioManager.Api;
using RadioManager.Model;

namespace RadioManager.Test
{
    /// <summary>
    ///  Class for testing ProgramApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProgramApiTests
    {
        private ProgramApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProgramApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProgramApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProgramApi
            //Assert.IsInstanceOfType(typeof(ProgramApi), instance, "instance is a ProgramApi");
        }

        /// <summary>
        /// Test CreateProgram
        /// </summary>
        [Test]
        public void CreateProgramTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProgramDataInput body = null;
            //var response = instance.CreateProgram(body);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        /// <summary>
        /// Test DeleteProgramById
        /// </summary>
        [Test]
        public void DeleteProgramByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeleteProgramById(id);
            //Assert.IsInstanceOf<InlineResponse202> (response, "response is InlineResponse202");
        }
        /// <summary>
        /// Test GetProgramById
        /// </summary>
        [Test]
        public void GetProgramByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? externalStationId = null;
            //var response = instance.GetProgramById(id, externalStationId);
            //Assert.IsInstanceOf<ProgramResult> (response, "response is ProgramResult");
        }
        /// <summary>
        /// Test ListPrograms
        /// </summary>
        [Test]
        public void ListProgramsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? broadcastId = null;
            //long? modelTypeId = null;
            //long? tagId = null;
            //long? presenterId = null;
            //long? genreId = null;
            //long? groupId = null;
            //long? blockId = null;
            //long? itemId = null;
            //int? disabled = null;
            //long? page = null;
            //long? limit = null;
            //string orderBy = null;
            //string orderDirection = null;
            //long? externalStationId = null;
            //var response = instance.ListPrograms(broadcastId, modelTypeId, tagId, presenterId, genreId, groupId, blockId, itemId, disabled, page, limit, orderBy, orderDirection, externalStationId);
            //Assert.IsInstanceOf<InlineResponse20011> (response, "response is InlineResponse20011");
        }
        /// <summary>
        /// Test UpdateProgramByID
        /// </summary>
        [Test]
        public void UpdateProgramByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProgramDataInput body = null;
            //long? id = null;
            //var response = instance.UpdateProgramByID(body, id);
            //Assert.IsInstanceOf<InlineResponse202> (response, "response is InlineResponse202");
        }
    }

}
