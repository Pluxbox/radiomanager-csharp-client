/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RadioManager.Client;
using RadioManager.Api;
using RadioManager.Model;

namespace RadioManager.Test
{
    /// <summary>
    ///  Class for testing TagApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TagApiTests
    {
        private TagApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TagApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TagApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TagApi
            //Assert.IsInstanceOfType(typeof(TagApi), instance, "instance is a TagApi");
        }

        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Test]
        public void CreateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TagDataInput body = null;
            //var response = instance.CreateTag(body);
            //Assert.IsInstanceOf<PostSuccess> (response, "response is PostSuccess");
        }
        /// <summary>
        /// Test DeleteTagById
        /// </summary>
        [Test]
        public void DeleteTagByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.DeleteTagById(id);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        /// <summary>
        /// Test GetTagById
        /// </summary>
        [Test]
        public void GetTagByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? externalStationId = null;
            //var response = instance.GetTagById(id, externalStationId);
            //Assert.IsInstanceOf<TagResult> (response, "response is TagResult");
        }
        /// <summary>
        /// Test ListTags
        /// </summary>
        [Test]
        public void ListTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? programId = null;
            //long? itemId = null;
            //long? broadcastId = null;
            //long? contactId = null;
            //long? limit = null;
            //string orderBy = null;
            //string orderDirection = null;
            //long? externalStationId = null;
            //var response = instance.ListTags(page, programId, itemId, broadcastId, contactId, limit, orderBy, orderDirection, externalStationId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateTagByID
        /// </summary>
        [Test]
        public void UpdateTagByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //TagDataInput body = null;
            //var response = instance.UpdateTagByID(id, body);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
    }

}
