/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// InviteUserData
    /// </summary>
    [DataContract]
    public partial class InviteUserData :  IEquatable<InviteUserData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteUserData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InviteUserData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteUserData" /> class.
        /// </summary>
        /// <param name="Email">Email (required).</param>
        /// <param name="RoleIds">RoleIds (required).</param>
        public InviteUserData(string Email = default(string), List<int?> RoleIds = default(List<int?>))
        {
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for InviteUserData and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "RoleIds" is required (not null)
            if (RoleIds == null)
            {
                throw new InvalidDataException("RoleIds is a required property for InviteUserData and cannot be null");
            }
            else
            {
                this.RoleIds = RoleIds;
            }
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets RoleIds
        /// </summary>
        [DataMember(Name="role_ids", EmitDefaultValue=false)]
        public List<int?> RoleIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteUserData {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  RoleIds: ").Append(RoleIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteUserData);
        }

        /// <summary>
        /// Returns true if InviteUserData instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteUserData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteUserData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.RoleIds == input.RoleIds ||
                    this.RoleIds != null &&
                    this.RoleIds.SequenceEqual(input.RoleIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.RoleIds != null)
                    hashCode = hashCode * 59 + this.RoleIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
