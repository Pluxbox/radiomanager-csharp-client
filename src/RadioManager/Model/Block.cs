/* 
 * Pluxbox Radiomanager Client
 *
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// Block
    /// </summary>
    [DataContract]
    public partial class Block :  IEquatable<Block>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Block" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Block() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Block" /> class.
        /// </summary>
        /// <param name="Id">ID of the current Block. (required).</param>
        /// <param name="BroadcastId">Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID. (required).</param>
        /// <param name="Start">Start of the Block (formatted as a DateTime object), saved with an TimeZone. (required).</param>
        /// <param name="Stop">End of the Block (formatted as a DateTime object), saved with an TimeZone. (required).</param>
        /// <param name="CreatedAt">Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone. (required).</param>
        /// <param name="UpdatedAt">Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone. (required).</param>
        /// <param name="DeletedAt">Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone. (required).</param>
        /// <param name="ExternalStationId">ExternalStationId.</param>
        public Block(long? Id = default(long?), long? BroadcastId = default(long?), DateTime? Start = default(DateTime?), DateTime? Stop = default(DateTime?), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?), DateTime? DeletedAt = default(DateTime?), long? ExternalStationId = default(long?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Block and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "BroadcastId" is required (not null)
            if (BroadcastId == null)
            {
                throw new InvalidDataException("BroadcastId is a required property for Block and cannot be null");
            }
            else
            {
                this.BroadcastId = BroadcastId;
            }
            // to ensure "Start" is required (not null)
            if (Start == null)
            {
                throw new InvalidDataException("Start is a required property for Block and cannot be null");
            }
            else
            {
                this.Start = Start;
            }
            // to ensure "Stop" is required (not null)
            if (Stop == null)
            {
                throw new InvalidDataException("Stop is a required property for Block and cannot be null");
            }
            else
            {
                this.Stop = Stop;
            }
            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for Block and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "UpdatedAt" is required (not null)
            if (UpdatedAt == null)
            {
                throw new InvalidDataException("UpdatedAt is a required property for Block and cannot be null");
            }
            else
            {
                this.UpdatedAt = UpdatedAt;
            }
            // to ensure "DeletedAt" is required (not null)
            if (DeletedAt == null)
            {
                throw new InvalidDataException("DeletedAt is a required property for Block and cannot be null");
            }
            else
            {
                this.DeletedAt = DeletedAt;
            }
            this.ExternalStationId = ExternalStationId;
        }
        
        /// <summary>
        /// ID of the current Block.
        /// </summary>
        /// <value>ID of the current Block.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
        /// </summary>
        /// <value>Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.</value>
        [DataMember(Name="broadcast_id", EmitDefaultValue=false)]
        public long? BroadcastId { get; set; }

        /// <summary>
        /// Start of the Block (formatted as a DateTime object), saved with an TimeZone.
        /// </summary>
        /// <value>Start of the Block (formatted as a DateTime object), saved with an TimeZone.</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }

        /// <summary>
        /// End of the Block (formatted as a DateTime object), saved with an TimeZone.
        /// </summary>
        /// <value>End of the Block (formatted as a DateTime object), saved with an TimeZone.</value>
        [DataMember(Name="stop", EmitDefaultValue=false)]
        public DateTime? Stop { get; set; }

        /// <summary>
        /// Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
        /// </summary>
        /// <value>Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
        /// </summary>
        /// <value>Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
        /// </summary>
        /// <value>Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExternalStationId
        /// </summary>
        [DataMember(Name="_external_station_id", EmitDefaultValue=false)]
        public long? ExternalStationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Block {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BroadcastId: ").Append(BroadcastId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  ExternalStationId: ").Append(ExternalStationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Block);
        }

        /// <summary>
        /// Returns true if Block instances are equal
        /// </summary>
        /// <param name="other">Instance of Block to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Block other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.BroadcastId == other.BroadcastId ||
                    this.BroadcastId != null &&
                    this.BroadcastId.Equals(other.BroadcastId)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.Stop == other.Stop ||
                    this.Stop != null &&
                    this.Stop.Equals(other.Stop)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.DeletedAt == other.DeletedAt ||
                    this.DeletedAt != null &&
                    this.DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    this.ExternalStationId == other.ExternalStationId ||
                    this.ExternalStationId != null &&
                    this.ExternalStationId.Equals(other.ExternalStationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.BroadcastId != null)
                    hash = hash * 59 + this.BroadcastId.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.Stop != null)
                    hash = hash * 59 + this.Stop.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hash = hash * 59 + this.DeletedAt.GetHashCode();
                if (this.ExternalStationId != null)
                    hash = hash * 59 + this.ExternalStationId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
