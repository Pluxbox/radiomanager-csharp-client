/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// EPGResults
    /// </summary>
    [DataContract]
    public partial class EPGResults :  IEquatable<EPGResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EPGResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EPGResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EPGResults" /> class.
        /// </summary>
        /// <param name="Days">Days (required).</param>
        /// <param name="NextPageUrl">NextPageUrl (required).</param>
        /// <param name="PrevPageUrl">PrevPageUrl (required).</param>
        public EPGResults(List<BroadcastEPGDay> Days = default(List<BroadcastEPGDay>), string NextPageUrl = default(string), string PrevPageUrl = default(string))
        {
            // to ensure "Days" is required (not null)
            if (Days == null)
            {
                throw new InvalidDataException("Days is a required property for EPGResults and cannot be null");
            }
            else
            {
                this.Days = Days;
            }
            // to ensure "NextPageUrl" is required (not null)
            if (NextPageUrl == null)
            {
                throw new InvalidDataException("NextPageUrl is a required property for EPGResults and cannot be null");
            }
            else
            {
                this.NextPageUrl = NextPageUrl;
            }
            // to ensure "PrevPageUrl" is required (not null)
            if (PrevPageUrl == null)
            {
                throw new InvalidDataException("PrevPageUrl is a required property for EPGResults and cannot be null");
            }
            else
            {
                this.PrevPageUrl = PrevPageUrl;
            }
        }
        
        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<BroadcastEPGDay> Days { get; set; }

        /// <summary>
        /// Gets or Sets NextPageUrl
        /// </summary>
        [DataMember(Name="next_page_url", EmitDefaultValue=false)]
        public string NextPageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PrevPageUrl
        /// </summary>
        [DataMember(Name="prev_page_url", EmitDefaultValue=false)]
        public string PrevPageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EPGResults {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  NextPageUrl: ").Append(NextPageUrl).Append("\n");
            sb.Append("  PrevPageUrl: ").Append(PrevPageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EPGResults);
        }

        /// <summary>
        /// Returns true if EPGResults instances are equal
        /// </summary>
        /// <param name="other">Instance of EPGResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EPGResults other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Days == other.Days ||
                    this.Days != null &&
                    this.Days.SequenceEqual(other.Days)
                ) && 
                (
                    this.NextPageUrl == other.NextPageUrl ||
                    this.NextPageUrl != null &&
                    this.NextPageUrl.Equals(other.NextPageUrl)
                ) && 
                (
                    this.PrevPageUrl == other.PrevPageUrl ||
                    this.PrevPageUrl != null &&
                    this.PrevPageUrl.Equals(other.PrevPageUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Days != null)
                    hash = hash * 59 + this.Days.GetHashCode();
                if (this.NextPageUrl != null)
                    hash = hash * 59 + this.NextPageUrl.GetHashCode();
                if (this.PrevPageUrl != null)
                    hash = hash * 59 + this.PrevPageUrl.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
