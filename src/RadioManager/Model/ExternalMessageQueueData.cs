/* 
 * Pluxbox Radiomanager Client
 *
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// ExternalMessageQueueData
    /// </summary>
    [DataContract]
    public partial class ExternalMessageQueueData :  IEquatable<ExternalMessageQueueData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalMessageQueueData" /> class.
        /// </summary>
        /// <param name="Message">Message **(Required)** (default to &quot;&quot;).</param>
        /// <param name="MessageId">ID of Message **(Required)**.</param>
        /// <param name="MessageDate">Message Date *(Optional)*.</param>
        /// <param name="SenderName">Sender **(Required)** (default to &quot;&quot;).</param>
        /// <param name="SenderId">ID of Sender *(Optional)*.</param>
        /// <param name="AvatarUrl">URL of Avatar *(Optional)*.</param>
        /// <param name="ModelTypeId">Assigned Model Type ID **(Required)**.</param>
        public ExternalMessageQueueData(string Message = "", int? MessageId = default(int?), DateTime? MessageDate = default(DateTime?), string SenderName = "", int? SenderId = default(int?), string AvatarUrl = default(string), int? ModelTypeId = default(int?))
        {
            // use default value if no "Message" provided
            if (Message == null)
            {
                this.Message = "";
            }
            else
            {
                this.Message = Message;
            }
            this.MessageId = MessageId;
            this.MessageDate = MessageDate;
            // use default value if no "SenderName" provided
            if (SenderName == null)
            {
                this.SenderName = "";
            }
            else
            {
                this.SenderName = SenderName;
            }
            this.SenderId = SenderId;
            this.AvatarUrl = AvatarUrl;
            this.ModelTypeId = ModelTypeId;
        }
        
        /// <summary>
        /// Message **(Required)**
        /// </summary>
        /// <value>Message **(Required)**</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// ID of Message **(Required)**
        /// </summary>
        /// <value>ID of Message **(Required)**</value>
        [DataMember(Name="message_id", EmitDefaultValue=false)]
        public int? MessageId { get; set; }

        /// <summary>
        /// Message Date *(Optional)*
        /// </summary>
        /// <value>Message Date *(Optional)*</value>
        [DataMember(Name="message_date", EmitDefaultValue=false)]
        public DateTime? MessageDate { get; set; }

        /// <summary>
        /// Sender **(Required)**
        /// </summary>
        /// <value>Sender **(Required)**</value>
        [DataMember(Name="sender_name", EmitDefaultValue=false)]
        public string SenderName { get; set; }

        /// <summary>
        /// ID of Sender *(Optional)*
        /// </summary>
        /// <value>ID of Sender *(Optional)*</value>
        [DataMember(Name="sender_id", EmitDefaultValue=false)]
        public int? SenderId { get; set; }

        /// <summary>
        /// URL of Avatar *(Optional)*
        /// </summary>
        /// <value>URL of Avatar *(Optional)*</value>
        [DataMember(Name="avatar_url", EmitDefaultValue=false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Assigned Model Type ID **(Required)**
        /// </summary>
        /// <value>Assigned Model Type ID **(Required)**</value>
        [DataMember(Name="model_type_id", EmitDefaultValue=false)]
        public int? ModelTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalMessageQueueData {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  MessageDate: ").Append(MessageDate).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  ModelTypeId: ").Append(ModelTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExternalMessageQueueData);
        }

        /// <summary>
        /// Returns true if ExternalMessageQueueData instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalMessageQueueData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalMessageQueueData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.MessageId == other.MessageId ||
                    this.MessageId != null &&
                    this.MessageId.Equals(other.MessageId)
                ) && 
                (
                    this.MessageDate == other.MessageDate ||
                    this.MessageDate != null &&
                    this.MessageDate.Equals(other.MessageDate)
                ) && 
                (
                    this.SenderName == other.SenderName ||
                    this.SenderName != null &&
                    this.SenderName.Equals(other.SenderName)
                ) && 
                (
                    this.SenderId == other.SenderId ||
                    this.SenderId != null &&
                    this.SenderId.Equals(other.SenderId)
                ) && 
                (
                    this.AvatarUrl == other.AvatarUrl ||
                    this.AvatarUrl != null &&
                    this.AvatarUrl.Equals(other.AvatarUrl)
                ) && 
                (
                    this.ModelTypeId == other.ModelTypeId ||
                    this.ModelTypeId != null &&
                    this.ModelTypeId.Equals(other.ModelTypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.MessageId != null)
                    hash = hash * 59 + this.MessageId.GetHashCode();
                if (this.MessageDate != null)
                    hash = hash * 59 + this.MessageDate.GetHashCode();
                if (this.SenderName != null)
                    hash = hash * 59 + this.SenderName.GetHashCode();
                if (this.SenderId != null)
                    hash = hash * 59 + this.SenderId.GetHashCode();
                if (this.AvatarUrl != null)
                    hash = hash * 59 + this.AvatarUrl.GetHashCode();
                if (this.ModelTypeId != null)
                    hash = hash * 59 + this.ModelTypeId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 600)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 600.", new [] { "Message" });
            }

            // MessageId (int?) minimum
            if(this.MessageId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MessageId, must be a value greater than or equal to 0.", new [] { "MessageId" });
            }

            // SenderName (string) maxLength
            if(this.SenderName != null && this.SenderName.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SenderName, length must be less than 60.", new [] { "SenderName" });
            }

            // SenderId (int?) minimum
            if(this.SenderId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SenderId, must be a value greater than or equal to 0.", new [] { "SenderId" });
            }

            // ModelTypeId (int?) minimum
            if(this.ModelTypeId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModelTypeId, must be a value greater than or equal to 0.", new [] { "ModelTypeId" });
            }

            yield break;
        }
    }

}
