/* 
 * Pluxbox Radiomanager Client
 *
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// BroadcastResult
    /// </summary>
    [DataContract]
    public partial class BroadcastResult :  IEquatable<BroadcastResult>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets RepetitionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepetitionTypeEnum
        {
            
            /// <summary>
            /// Enum _1week for "1 week"
            /// </summary>
            [EnumMember(Value = "1 week")]
            _1week,
            
            /// <summary>
            /// Enum _2weeks for "2 weeks"
            /// </summary>
            [EnumMember(Value = "2 weeks")]
            _2weeks,
            
            /// <summary>
            /// Enum _4weeks for "4 weeks"
            /// </summary>
            [EnumMember(Value = "4 weeks")]
            _4weeks,
            
            /// <summary>
            /// Enum _1month for "1 month"
            /// </summary>
            [EnumMember(Value = "1 month")]
            _1month
        }

        /// <summary>
        /// Gets or Sets RepetitionType
        /// </summary>
        [DataMember(Name="repetition_type", EmitDefaultValue=false)]
        public RepetitionTypeEnum? RepetitionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BroadcastResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BroadcastResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BroadcastResult" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="UpdatedAt">UpdatedAt (required).</param>
        /// <param name="CreatedAt">CreatedAt (required).</param>
        /// <param name="DeletedAt">DeletedAt (required).</param>
        /// <param name="ExternalStationId">ExternalStationId.</param>
        /// <param name="ProgramId">ProgramId.</param>
        /// <param name="ModelTypeId">ModelTypeId.</param>
        /// <param name="StationId">StationId.</param>
        /// <param name="FieldValues">FieldValues.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Start">Start.</param>
        /// <param name="Stop">Stop.</param>
        /// <param name="GenreId">GenreId.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ShortName">ShortName.</param>
        /// <param name="MediumName">MediumName.</param>
        /// <param name="Website">Website.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Recommended">Recommended.</param>
        /// <param name="Language">Language.</param>
        /// <param name="Published">Published.</param>
        /// <param name="RepetitionUid">RepetitionUid.</param>
        /// <param name="RepetitionType">RepetitionType.</param>
        /// <param name="RepetitionEnd">RepetitionEnd.</param>
        /// <param name="RepetitionStart">RepetitionStart.</param>
        /// <param name="RepetitionDays">RepetitionDays.</param>
        /// <param name="PtyCodeId">PtyCodeId.</param>
        /// <param name="Items">Items.</param>
        /// <param name="Blocks">Blocks.</param>
        /// <param name="Program">Program.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="Presenters">Presenters.</param>
        /// <param name="ModelType">ModelType.</param>
        public BroadcastResult(long? Id = default(long?), DateTime? UpdatedAt = default(DateTime?), DateTime? CreatedAt = default(DateTime?), DateTime? DeletedAt = default(DateTime?), long? ExternalStationId = default(long?), long? ProgramId = default(long?), long? ModelTypeId = default(long?), long? StationId = default(long?), BroadcastFieldValues FieldValues = default(BroadcastFieldValues), string Title = default(string), DateTime? Start = default(DateTime?), DateTime? Stop = default(DateTime?), long? GenreId = default(long?), string Description = default(string), string ShortName = default(string), string MediumName = default(string), string Website = default(string), string Email = default(string), bool? Recommended = default(bool?), string Language = default(string), bool? Published = default(bool?), Guid? RepetitionUid = default(Guid?), RepetitionTypeEnum? RepetitionType = default(RepetitionTypeEnum?), DateTime? RepetitionEnd = default(DateTime?), DateTime? RepetitionStart = default(DateTime?), List<bool?> RepetitionDays = default(List<bool?>), long? PtyCodeId = default(long?), BroadcastRelationsItems Items = default(BroadcastRelationsItems), BroadcastRelationsBlocks Blocks = default(BroadcastRelationsBlocks), BlockRelationsProgram Program = default(BlockRelationsProgram), BroadcastRelationsTags Tags = default(BroadcastRelationsTags), BroadcastRelationsPresenters Presenters = default(BroadcastRelationsPresenters), BroadcastRelationsModelType ModelType = default(BroadcastRelationsModelType))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for BroadcastResult and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "UpdatedAt" is required (not null)
            if (UpdatedAt == null)
            {
                throw new InvalidDataException("UpdatedAt is a required property for BroadcastResult and cannot be null");
            }
            else
            {
                this.UpdatedAt = UpdatedAt;
            }
            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for BroadcastResult and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "DeletedAt" is required (not null)
            if (DeletedAt == null)
            {
                throw new InvalidDataException("DeletedAt is a required property for BroadcastResult and cannot be null");
            }
            else
            {
                this.DeletedAt = DeletedAt;
            }
            this.ExternalStationId = ExternalStationId;
            this.ProgramId = ProgramId;
            this.ModelTypeId = ModelTypeId;
            this.StationId = StationId;
            this.FieldValues = FieldValues;
            this.Title = Title;
            this.Start = Start;
            this.Stop = Stop;
            this.GenreId = GenreId;
            this.Description = Description;
            this.ShortName = ShortName;
            this.MediumName = MediumName;
            this.Website = Website;
            this.Email = Email;
            this.Recommended = Recommended;
            this.Language = Language;
            this.Published = Published;
            this.RepetitionUid = RepetitionUid;
            this.RepetitionType = RepetitionType;
            this.RepetitionEnd = RepetitionEnd;
            this.RepetitionStart = RepetitionStart;
            this.RepetitionDays = RepetitionDays;
            this.PtyCodeId = PtyCodeId;
            this.Items = Items;
            this.Blocks = Blocks;
            this.Program = Program;
            this.Tags = Tags;
            this.Presenters = Presenters;
            this.ModelType = ModelType;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExternalStationId
        /// </summary>
        [DataMember(Name="_external_station_id", EmitDefaultValue=false)]
        public long? ExternalStationId { get; set; }

        /// <summary>
        /// Gets or Sets ProgramId
        /// </summary>
        [DataMember(Name="program_id", EmitDefaultValue=false)]
        public long? ProgramId { get; set; }

        /// <summary>
        /// Gets or Sets ModelTypeId
        /// </summary>
        [DataMember(Name="model_type_id", EmitDefaultValue=false)]
        public long? ModelTypeId { get; set; }

        /// <summary>
        /// Gets or Sets StationId
        /// </summary>
        [DataMember(Name="station_id", EmitDefaultValue=false)]
        public long? StationId { get; set; }

        /// <summary>
        /// Gets or Sets FieldValues
        /// </summary>
        [DataMember(Name="field_values", EmitDefaultValue=false)]
        public BroadcastFieldValues FieldValues { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name="stop", EmitDefaultValue=false)]
        public DateTime? Stop { get; set; }

        /// <summary>
        /// Gets or Sets GenreId
        /// </summary>
        [DataMember(Name="genre_id", EmitDefaultValue=false)]
        public long? GenreId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="short_name", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets MediumName
        /// </summary>
        [DataMember(Name="medium_name", EmitDefaultValue=false)]
        public string MediumName { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Recommended
        /// </summary>
        [DataMember(Name="recommended", EmitDefaultValue=false)]
        public bool? Recommended { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public bool? Published { get; set; }

        /// <summary>
        /// Gets or Sets RepetitionUid
        /// </summary>
        [DataMember(Name="repetition_uid", EmitDefaultValue=false)]
        public Guid? RepetitionUid { get; set; }


        /// <summary>
        /// Gets or Sets RepetitionEnd
        /// </summary>
        [DataMember(Name="repetition_end", EmitDefaultValue=false)]
        public DateTime? RepetitionEnd { get; set; }

        /// <summary>
        /// Gets or Sets RepetitionStart
        /// </summary>
        [DataMember(Name="repetition_start", EmitDefaultValue=false)]
        public DateTime? RepetitionStart { get; set; }

        /// <summary>
        /// Gets or Sets RepetitionDays
        /// </summary>
        [DataMember(Name="repetition_days", EmitDefaultValue=false)]
        public List<bool?> RepetitionDays { get; set; }

        /// <summary>
        /// Gets or Sets PtyCodeId
        /// </summary>
        [DataMember(Name="pty_code_id", EmitDefaultValue=false)]
        public long? PtyCodeId { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public BroadcastRelationsItems Items { get; set; }

        /// <summary>
        /// Gets or Sets Blocks
        /// </summary>
        [DataMember(Name="blocks", EmitDefaultValue=false)]
        public BroadcastRelationsBlocks Blocks { get; set; }

        /// <summary>
        /// Gets or Sets Program
        /// </summary>
        [DataMember(Name="program", EmitDefaultValue=false)]
        public BlockRelationsProgram Program { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public BroadcastRelationsTags Tags { get; set; }

        /// <summary>
        /// Gets or Sets Presenters
        /// </summary>
        [DataMember(Name="presenters", EmitDefaultValue=false)]
        public BroadcastRelationsPresenters Presenters { get; set; }

        /// <summary>
        /// Gets or Sets ModelType
        /// </summary>
        [DataMember(Name="model_type", EmitDefaultValue=false)]
        public BroadcastRelationsModelType ModelType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BroadcastResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  ExternalStationId: ").Append(ExternalStationId).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ModelTypeId: ").Append(ModelTypeId).Append("\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  FieldValues: ").Append(FieldValues).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  GenreId: ").Append(GenreId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  MediumName: ").Append(MediumName).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Recommended: ").Append(Recommended).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  RepetitionUid: ").Append(RepetitionUid).Append("\n");
            sb.Append("  RepetitionType: ").Append(RepetitionType).Append("\n");
            sb.Append("  RepetitionEnd: ").Append(RepetitionEnd).Append("\n");
            sb.Append("  RepetitionStart: ").Append(RepetitionStart).Append("\n");
            sb.Append("  RepetitionDays: ").Append(RepetitionDays).Append("\n");
            sb.Append("  PtyCodeId: ").Append(PtyCodeId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("  Program: ").Append(Program).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Presenters: ").Append(Presenters).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BroadcastResult);
        }

        /// <summary>
        /// Returns true if BroadcastResult instances are equal
        /// </summary>
        /// <param name="other">Instance of BroadcastResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BroadcastResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.DeletedAt == other.DeletedAt ||
                    this.DeletedAt != null &&
                    this.DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    this.ExternalStationId == other.ExternalStationId ||
                    this.ExternalStationId != null &&
                    this.ExternalStationId.Equals(other.ExternalStationId)
                ) && 
                (
                    this.ProgramId == other.ProgramId ||
                    this.ProgramId != null &&
                    this.ProgramId.Equals(other.ProgramId)
                ) && 
                (
                    this.ModelTypeId == other.ModelTypeId ||
                    this.ModelTypeId != null &&
                    this.ModelTypeId.Equals(other.ModelTypeId)
                ) && 
                (
                    this.StationId == other.StationId ||
                    this.StationId != null &&
                    this.StationId.Equals(other.StationId)
                ) && 
                (
                    this.FieldValues == other.FieldValues ||
                    this.FieldValues != null &&
                    this.FieldValues.Equals(other.FieldValues)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.Stop == other.Stop ||
                    this.Stop != null &&
                    this.Stop.Equals(other.Stop)
                ) && 
                (
                    this.GenreId == other.GenreId ||
                    this.GenreId != null &&
                    this.GenreId.Equals(other.GenreId)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                ) && 
                (
                    this.MediumName == other.MediumName ||
                    this.MediumName != null &&
                    this.MediumName.Equals(other.MediumName)
                ) && 
                (
                    this.Website == other.Website ||
                    this.Website != null &&
                    this.Website.Equals(other.Website)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Recommended == other.Recommended ||
                    this.Recommended != null &&
                    this.Recommended.Equals(other.Recommended)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.Published == other.Published ||
                    this.Published != null &&
                    this.Published.Equals(other.Published)
                ) && 
                (
                    this.RepetitionUid == other.RepetitionUid ||
                    this.RepetitionUid != null &&
                    this.RepetitionUid.Equals(other.RepetitionUid)
                ) && 
                (
                    this.RepetitionType == other.RepetitionType ||
                    this.RepetitionType != null &&
                    this.RepetitionType.Equals(other.RepetitionType)
                ) && 
                (
                    this.RepetitionEnd == other.RepetitionEnd ||
                    this.RepetitionEnd != null &&
                    this.RepetitionEnd.Equals(other.RepetitionEnd)
                ) && 
                (
                    this.RepetitionStart == other.RepetitionStart ||
                    this.RepetitionStart != null &&
                    this.RepetitionStart.Equals(other.RepetitionStart)
                ) && 
                (
                    this.RepetitionDays == other.RepetitionDays ||
                    this.RepetitionDays != null &&
                    this.RepetitionDays.SequenceEqual(other.RepetitionDays)
                ) && 
                (
                    this.PtyCodeId == other.PtyCodeId ||
                    this.PtyCodeId != null &&
                    this.PtyCodeId.Equals(other.PtyCodeId)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.Equals(other.Items)
                ) && 
                (
                    this.Blocks == other.Blocks ||
                    this.Blocks != null &&
                    this.Blocks.Equals(other.Blocks)
                ) && 
                (
                    this.Program == other.Program ||
                    this.Program != null &&
                    this.Program.Equals(other.Program)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.Presenters == other.Presenters ||
                    this.Presenters != null &&
                    this.Presenters.Equals(other.Presenters)
                ) && 
                (
                    this.ModelType == other.ModelType ||
                    this.ModelType != null &&
                    this.ModelType.Equals(other.ModelType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hash = hash * 59 + this.DeletedAt.GetHashCode();
                if (this.ExternalStationId != null)
                    hash = hash * 59 + this.ExternalStationId.GetHashCode();
                if (this.ProgramId != null)
                    hash = hash * 59 + this.ProgramId.GetHashCode();
                if (this.ModelTypeId != null)
                    hash = hash * 59 + this.ModelTypeId.GetHashCode();
                if (this.StationId != null)
                    hash = hash * 59 + this.StationId.GetHashCode();
                if (this.FieldValues != null)
                    hash = hash * 59 + this.FieldValues.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.Stop != null)
                    hash = hash * 59 + this.Stop.GetHashCode();
                if (this.GenreId != null)
                    hash = hash * 59 + this.GenreId.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                if (this.MediumName != null)
                    hash = hash * 59 + this.MediumName.GetHashCode();
                if (this.Website != null)
                    hash = hash * 59 + this.Website.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Recommended != null)
                    hash = hash * 59 + this.Recommended.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.Published != null)
                    hash = hash * 59 + this.Published.GetHashCode();
                if (this.RepetitionUid != null)
                    hash = hash * 59 + this.RepetitionUid.GetHashCode();
                if (this.RepetitionType != null)
                    hash = hash * 59 + this.RepetitionType.GetHashCode();
                if (this.RepetitionEnd != null)
                    hash = hash * 59 + this.RepetitionEnd.GetHashCode();
                if (this.RepetitionStart != null)
                    hash = hash * 59 + this.RepetitionStart.GetHashCode();
                if (this.RepetitionDays != null)
                    hash = hash * 59 + this.RepetitionDays.GetHashCode();
                if (this.PtyCodeId != null)
                    hash = hash * 59 + this.PtyCodeId.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Blocks != null)
                    hash = hash * 59 + this.Blocks.GetHashCode();
                if (this.Program != null)
                    hash = hash * 59 + this.Program.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Presenters != null)
                    hash = hash * 59 + this.Presenters.GetHashCode();
                if (this.ModelType != null)
                    hash = hash * 59 + this.ModelType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PtyCodeId (long?) minimum
            if(this.PtyCodeId < (long?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PtyCodeId, must be a value greater than or equal to 1.", new [] { "PtyCodeId" });
            }

            yield break;
        }
    }

}
