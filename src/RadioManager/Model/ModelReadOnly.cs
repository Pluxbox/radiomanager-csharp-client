/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// ModelReadOnly
    /// </summary>
    [DataContract]
    public partial class ModelReadOnly :  IEquatable<ModelReadOnly>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelReadOnly" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelReadOnly() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelReadOnly" /> class.
        /// </summary>
        /// <param name="Error">Given error (not formatted), describes the problem. (required).</param>
        /// <param name="StatusCode">Assigned StatusCode, is used in order to create a relationship between Error and Response. (required).</param>
        public ModelReadOnly(string Error = default(string), long? StatusCode = default(long?))
        {
            // to ensure "Error" is required (not null)
            if (Error == null)
            {
                throw new InvalidDataException("Error is a required property for ModelReadOnly and cannot be null");
            }
            else
            {
                this.Error = Error;
            }
            // to ensure "StatusCode" is required (not null)
            if (StatusCode == null)
            {
                throw new InvalidDataException("StatusCode is a required property for ModelReadOnly and cannot be null");
            }
            else
            {
                this.StatusCode = StatusCode;
            }
        }
        
        /// <summary>
        /// Given error (not formatted), describes the problem.
        /// </summary>
        /// <value>Given error (not formatted), describes the problem.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Assigned StatusCode, is used in order to create a relationship between Error and Response.
        /// </summary>
        /// <value>Assigned StatusCode, is used in order to create a relationship between Error and Response.</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public long? StatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelReadOnly {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModelReadOnly);
        }

        /// <summary>
        /// Returns true if ModelReadOnly instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelReadOnly to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelReadOnly other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
