/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RadioManager.Client.SwaggerDateConverter;

namespace RadioManager.Model
{
    /// <summary>
    /// ModelTypeRelations
    /// </summary>
    [DataContract]
    public partial class ModelTypeRelations :  IEquatable<ModelTypeRelations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelTypeRelations" /> class.
        /// </summary>
        /// <param name="Campaigns">Campaigns.</param>
        /// <param name="Broadcasts">Broadcasts.</param>
        /// <param name="Programs">Programs.</param>
        /// <param name="Contacts">Contacts.</param>
        /// <param name="Presenters">Presenters.</param>
        /// <param name="Items">Items.</param>
        public ModelTypeRelations(ModelTypeRelationsCampaigns Campaigns = default(ModelTypeRelationsCampaigns), ModelTypeRelationsBroadcasts Broadcasts = default(ModelTypeRelationsBroadcasts), ModelTypeRelationsPrograms Programs = default(ModelTypeRelationsPrograms), ModelTypeRelationsContacts Contacts = default(ModelTypeRelationsContacts), ModelTypeRelationsPresenters Presenters = default(ModelTypeRelationsPresenters), ModelTypeRelationsItems Items = default(ModelTypeRelationsItems))
        {
            this.Campaigns = Campaigns;
            this.Broadcasts = Broadcasts;
            this.Programs = Programs;
            this.Contacts = Contacts;
            this.Presenters = Presenters;
            this.Items = Items;
        }
        
        /// <summary>
        /// Gets or Sets Campaigns
        /// </summary>
        [DataMember(Name="campaigns", EmitDefaultValue=false)]
        public ModelTypeRelationsCampaigns Campaigns { get; set; }

        /// <summary>
        /// Gets or Sets Broadcasts
        /// </summary>
        [DataMember(Name="broadcasts", EmitDefaultValue=false)]
        public ModelTypeRelationsBroadcasts Broadcasts { get; set; }

        /// <summary>
        /// Gets or Sets Programs
        /// </summary>
        [DataMember(Name="programs", EmitDefaultValue=false)]
        public ModelTypeRelationsPrograms Programs { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public ModelTypeRelationsContacts Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Presenters
        /// </summary>
        [DataMember(Name="presenters", EmitDefaultValue=false)]
        public ModelTypeRelationsPresenters Presenters { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public ModelTypeRelationsItems Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelTypeRelations {\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("  Broadcasts: ").Append(Broadcasts).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Presenters: ").Append(Presenters).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModelTypeRelations);
        }

        /// <summary>
        /// Returns true if ModelTypeRelations instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelTypeRelations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelTypeRelations other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Campaigns == other.Campaigns ||
                    this.Campaigns != null &&
                    this.Campaigns.Equals(other.Campaigns)
                ) && 
                (
                    this.Broadcasts == other.Broadcasts ||
                    this.Broadcasts != null &&
                    this.Broadcasts.Equals(other.Broadcasts)
                ) && 
                (
                    this.Programs == other.Programs ||
                    this.Programs != null &&
                    this.Programs.Equals(other.Programs)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.Equals(other.Contacts)
                ) && 
                (
                    this.Presenters == other.Presenters ||
                    this.Presenters != null &&
                    this.Presenters.Equals(other.Presenters)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.Equals(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Campaigns != null)
                    hash = hash * 59 + this.Campaigns.GetHashCode();
                if (this.Broadcasts != null)
                    hash = hash * 59 + this.Broadcasts.GetHashCode();
                if (this.Programs != null)
                    hash = hash * 59 + this.Programs.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.Presenters != null)
                    hash = hash * 59 + this.Presenters.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
