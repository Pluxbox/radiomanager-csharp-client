/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RadioManager.Client;
using RadioManager.Model;

namespace RadioManager.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IItemApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an new item.
        /// </summary>
        /// <remarks>
        /// Create item.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>PostSuccess</returns>
        PostSuccess CreateItem (ItemDataInput body = null);

        /// <summary>
        /// Create an new item.
        /// </summary>
        /// <remarks>
        /// Create item.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of PostSuccess</returns>
        ApiResponse<PostSuccess> CreateItemWithHttpInfo (ItemDataInput body = null);
        /// <summary>
        /// Post a current playing item, keep structure
        /// </summary>
        /// <remarks>
        /// Post a current playing item, keep structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        Success CurrentItemPostStructure (ImportItem body = null);

        /// <summary>
        /// Post a current playing item, keep structure
        /// </summary>
        /// <remarks>
        /// Post a current playing item, keep structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> CurrentItemPostStructureWithHttpInfo (ImportItem body = null);
        /// <summary>
        /// Post a current playing item
        /// </summary>
        /// <remarks>
        /// Post a current playing item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        Success CurrentItemPostTiming (ImportItem body = null);

        /// <summary>
        /// Post a current playing item
        /// </summary>
        /// <remarks>
        /// Post a current playing item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> CurrentItemPostTimingWithHttpInfo (ImportItem body = null);
        /// <summary>
        /// Delete item by ID.
        /// </summary>
        /// <remarks>
        /// Delete item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>Success</returns>
        Success DeleteItemById (long? id);

        /// <summary>
        /// Delete item by ID.
        /// </summary>
        /// <remarks>
        /// Delete item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteItemByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get current Item
        /// </summary>
        /// <remarks>
        /// Get current Item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>ItemResult</returns>
        ItemResult GetCurrentItem (bool? lastplayed = null);

        /// <summary>
        /// Get current Item
        /// </summary>
        /// <remarks>
        /// Get current Item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>ApiResponse of ItemResult</returns>
        ApiResponse<ItemResult> GetCurrentItemWithHttpInfo (bool? lastplayed = null);
        /// <summary>
        /// Get extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Read item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ItemResult</returns>
        ItemResult GetItemById (long? id, long? externalStationId = null);

        /// <summary>
        /// Get extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Read item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of ItemResult</returns>
        ApiResponse<ItemResult> GetItemByIdWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get a list of all the items currently in your station.
        /// </summary>
        /// <remarks>
        /// Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        Object ListItems (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);

        /// <summary>
        /// Get a list of all the items currently in your station.
        /// </summary>
        /// <remarks>
        /// Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListItemsWithHttpInfo (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);
        /// <summary>
        /// Post a playlist, do not remove previously imported items
        /// </summary>
        /// <remarks>
        /// Post a playlist, do not remove previously imported items
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        Object PlaylistPostMerge (Object body = null);

        /// <summary>
        /// Post a playlist, do not remove previously imported items
        /// </summary>
        /// <remarks>
        /// Post a playlist, do not remove previously imported items
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PlaylistPostMergeWithHttpInfo (Object body = null);
        /// <summary>
        /// Post a playlist, keep current structure
        /// </summary>
        /// <remarks>
        /// Post a playlist, keep current structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        Object PlaylistPostStructure (Object body = null);

        /// <summary>
        /// Post a playlist, keep current structure
        /// </summary>
        /// <remarks>
        /// Post a playlist, keep current structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PlaylistPostStructureWithHttpInfo (Object body = null);
        /// <summary>
        /// Post a playlist
        /// </summary>
        /// <remarks>
        /// Post a playlist
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        Object PlaylistPostTiming (Object body = null);

        /// <summary>
        /// Post a playlist
        /// </summary>
        /// <remarks>
        /// Post a playlist
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PlaylistPostTimingWithHttpInfo (Object body = null);
        /// <summary>
        /// Stop an Item
        /// </summary>
        /// <remarks>
        /// Set a current playing or specific item on played
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        Success StopCurrentItem (Object body = null);

        /// <summary>
        /// Stop an Item
        /// </summary>
        /// <remarks>
        /// Set a current playing or specific item on played
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> StopCurrentItemWithHttpInfo (Object body = null);
        /// <summary>
        /// Update extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Update item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        Success UpdateItemById (long? id, ItemDataInput body = null);

        /// <summary>
        /// Update extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Update item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateItemByIdWithHttpInfo (long? id, ItemDataInput body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an new item.
        /// </summary>
        /// <remarks>
        /// Create item.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of PostSuccess</returns>
        System.Threading.Tasks.Task<PostSuccess> CreateItemAsync (ItemDataInput body = null);

        /// <summary>
        /// Create an new item.
        /// </summary>
        /// <remarks>
        /// Create item.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (PostSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSuccess>> CreateItemAsyncWithHttpInfo (ItemDataInput body = null);
        /// <summary>
        /// Post a current playing item, keep structure
        /// </summary>
        /// <remarks>
        /// Post a current playing item, keep structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> CurrentItemPostStructureAsync (ImportItem body = null);

        /// <summary>
        /// Post a current playing item, keep structure
        /// </summary>
        /// <remarks>
        /// Post a current playing item, keep structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> CurrentItemPostStructureAsyncWithHttpInfo (ImportItem body = null);
        /// <summary>
        /// Post a current playing item
        /// </summary>
        /// <remarks>
        /// Post a current playing item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> CurrentItemPostTimingAsync (ImportItem body = null);

        /// <summary>
        /// Post a current playing item
        /// </summary>
        /// <remarks>
        /// Post a current playing item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> CurrentItemPostTimingAsyncWithHttpInfo (ImportItem body = null);
        /// <summary>
        /// Delete item by ID.
        /// </summary>
        /// <remarks>
        /// Delete item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteItemByIdAsync (long? id);

        /// <summary>
        /// Delete item by ID.
        /// </summary>
        /// <remarks>
        /// Delete item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteItemByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get current Item
        /// </summary>
        /// <remarks>
        /// Get current Item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>Task of ItemResult</returns>
        System.Threading.Tasks.Task<ItemResult> GetCurrentItemAsync (bool? lastplayed = null);

        /// <summary>
        /// Get current Item
        /// </summary>
        /// <remarks>
        /// Get current Item
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (ItemResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemResult>> GetCurrentItemAsyncWithHttpInfo (bool? lastplayed = null);
        /// <summary>
        /// Get extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Read item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ItemResult</returns>
        System.Threading.Tasks.Task<ItemResult> GetItemByIdAsync (long? id, long? externalStationId = null);

        /// <summary>
        /// Get extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Read item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (ItemResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemResult>> GetItemByIdAsyncWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get a list of all the items currently in your station.
        /// </summary>
        /// <remarks>
        /// Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListItemsAsync (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);

        /// <summary>
        /// Get a list of all the items currently in your station.
        /// </summary>
        /// <remarks>
        /// Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListItemsAsyncWithHttpInfo (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);
        /// <summary>
        /// Post a playlist, do not remove previously imported items
        /// </summary>
        /// <remarks>
        /// Post a playlist, do not remove previously imported items
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PlaylistPostMergeAsync (Object body = null);

        /// <summary>
        /// Post a playlist, do not remove previously imported items
        /// </summary>
        /// <remarks>
        /// Post a playlist, do not remove previously imported items
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlaylistPostMergeAsyncWithHttpInfo (Object body = null);
        /// <summary>
        /// Post a playlist, keep current structure
        /// </summary>
        /// <remarks>
        /// Post a playlist, keep current structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PlaylistPostStructureAsync (Object body = null);

        /// <summary>
        /// Post a playlist, keep current structure
        /// </summary>
        /// <remarks>
        /// Post a playlist, keep current structure
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlaylistPostStructureAsyncWithHttpInfo (Object body = null);
        /// <summary>
        /// Post a playlist
        /// </summary>
        /// <remarks>
        /// Post a playlist
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PlaylistPostTimingAsync (Object body = null);

        /// <summary>
        /// Post a playlist
        /// </summary>
        /// <remarks>
        /// Post a playlist
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlaylistPostTimingAsyncWithHttpInfo (Object body = null);
        /// <summary>
        /// Stop an Item
        /// </summary>
        /// <remarks>
        /// Set a current playing or specific item on played
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> StopCurrentItemAsync (Object body = null);

        /// <summary>
        /// Stop an Item
        /// </summary>
        /// <remarks>
        /// Set a current playing or specific item on played
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> StopCurrentItemAsyncWithHttpInfo (Object body = null);
        /// <summary>
        /// Update extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Update item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateItemByIdAsync (long? id, ItemDataInput body = null);

        /// <summary>
        /// Update extended item details by ID.
        /// </summary>
        /// <remarks>
        /// Update item by id.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateItemByIdAsyncWithHttpInfo (long? id, ItemDataInput body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ItemApi : IItemApi
    {
        private RadioManager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemApi(String basePath)
        {
            this.Configuration = new RadioManager.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class
        /// </summary>
        /// <returns></returns>
        public ItemApi()
        {
            this.Configuration = RadioManager.Client.Configuration.Default;

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemApi(RadioManager.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RadioManager.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RadioManager.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadioManager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an new item. Create item.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>PostSuccess</returns>
        public PostSuccess CreateItem (ItemDataInput body = null)
        {
             ApiResponse<PostSuccess> localVarResponse = CreateItemWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an new item. Create item.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of PostSuccess</returns>
        public ApiResponse< PostSuccess > CreateItemWithHttpInfo (ItemDataInput body = null)
        {

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSuccess)));
        }

        /// <summary>
        /// Create an new item. Create item.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of PostSuccess</returns>
        public async System.Threading.Tasks.Task<PostSuccess> CreateItemAsync (ItemDataInput body = null)
        {
             ApiResponse<PostSuccess> localVarResponse = await CreateItemAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an new item. Create item.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (PostSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostSuccess>> CreateItemAsyncWithHttpInfo (ItemDataInput body = null)
        {

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSuccess)));
        }

        /// <summary>
        /// Post a current playing item, keep structure Post a current playing item, keep structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        public Success CurrentItemPostStructure (ImportItem body = null)
        {
             ApiResponse<Success> localVarResponse = CurrentItemPostStructureWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a current playing item, keep structure Post a current playing item, keep structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > CurrentItemPostStructureWithHttpInfo (ImportItem body = null)
        {

            var localVarPath = "/items/current/structure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrentItemPostStructure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Post a current playing item, keep structure Post a current playing item, keep structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> CurrentItemPostStructureAsync (ImportItem body = null)
        {
             ApiResponse<Success> localVarResponse = await CurrentItemPostStructureAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a current playing item, keep structure Post a current playing item, keep structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> CurrentItemPostStructureAsyncWithHttpInfo (ImportItem body = null)
        {

            var localVarPath = "/items/current/structure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrentItemPostStructure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Post a current playing item Post a current playing item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        public Success CurrentItemPostTiming (ImportItem body = null)
        {
             ApiResponse<Success> localVarResponse = CurrentItemPostTimingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a current playing item Post a current playing item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > CurrentItemPostTimingWithHttpInfo (ImportItem body = null)
        {

            var localVarPath = "/items/current/timing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrentItemPostTiming", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Post a current playing item Post a current playing item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> CurrentItemPostTimingAsync (ImportItem body = null)
        {
             ApiResponse<Success> localVarResponse = await CurrentItemPostTimingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a current playing item Post a current playing item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> CurrentItemPostTimingAsyncWithHttpInfo (ImportItem body = null)
        {

            var localVarPath = "/items/current/timing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrentItemPostTiming", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete item by ID. Delete item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>Success</returns>
        public Success DeleteItemById (long? id)
        {
             ApiResponse<Success> localVarResponse = DeleteItemByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete item by ID. Delete item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteItemByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->DeleteItemById");

            var localVarPath = "/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete item by ID. Delete item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteItemByIdAsync (long? id)
        {
             ApiResponse<Success> localVarResponse = await DeleteItemByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete item by ID. Delete item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteItemByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->DeleteItemById");

            var localVarPath = "/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Get current Item Get current Item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>ItemResult</returns>
        public ItemResult GetCurrentItem (bool? lastplayed = null)
        {
             ApiResponse<ItemResult> localVarResponse = GetCurrentItemWithHttpInfo(lastplayed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current Item Get current Item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>ApiResponse of ItemResult</returns>
        public ApiResponse< ItemResult > GetCurrentItemWithHttpInfo (bool? lastplayed = null)
        {

            var localVarPath = "/items/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastplayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastplayed", lastplayed)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResult)));
        }

        /// <summary>
        /// Get current Item Get current Item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>Task of ItemResult</returns>
        public async System.Threading.Tasks.Task<ItemResult> GetCurrentItemAsync (bool? lastplayed = null)
        {
             ApiResponse<ItemResult> localVarResponse = await GetCurrentItemAsyncWithHttpInfo(lastplayed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current Item Get current Item
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastplayed">Show last played item if there is no current item*(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (ItemResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemResult>> GetCurrentItemAsyncWithHttpInfo (bool? lastplayed = null)
        {

            var localVarPath = "/items/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastplayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastplayed", lastplayed)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResult)));
        }

        /// <summary>
        /// Get extended item details by ID. Read item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ItemResult</returns>
        public ItemResult GetItemById (long? id, long? externalStationId = null)
        {
             ApiResponse<ItemResult> localVarResponse = GetItemByIdWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get extended item details by ID. Read item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of ItemResult</returns>
        public ApiResponse< ItemResult > GetItemByIdWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->GetItemById");

            var localVarPath = "/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResult)));
        }

        /// <summary>
        /// Get extended item details by ID. Read item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ItemResult</returns>
        public async System.Threading.Tasks.Task<ItemResult> GetItemByIdAsync (long? id, long? externalStationId = null)
        {
             ApiResponse<ItemResult> localVarResponse = await GetItemByIdAsyncWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get extended item details by ID. Read item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (ItemResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemResult>> GetItemByIdAsyncWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->GetItemById");

            var localVarPath = "/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResult)));
        }

        /// <summary>
        /// Get a list of all the items currently in your station. Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        public Object ListItems (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {
             ApiResponse<Object> localVarResponse = ListItemsWithHttpInfo(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, externalId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all the items currently in your station. Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListItemsWithHttpInfo (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (blockId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "block_id", blockId)); // query parameter
            if (broadcastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "broadcast_id", broadcastId)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag_id", tagId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaign_id", campaignId)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)); // query parameter
            if (programDraftId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "program_draft_id", programDraftId)); // query parameter
            if (userDraftId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_draft_id", userDraftId)); // query parameter
            if (stationDraftId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "station_draft_id", stationDraftId)); // query parameter
            if (programId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "program_id", programId)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_id", externalId)); // query parameter
            if (startMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-min", startMin)); // query parameter
            if (startMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-max", startMax)); // query parameter
            if (durationMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration-min", durationMin)); // query parameter
            if (durationMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration-max", durationMax)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-direction", orderDirection)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a list of all the items currently in your station. Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListItemsAsync (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {
             ApiResponse<Object> localVarResponse = await ListItemsAsyncWithHttpInfo(page, blockId, broadcastId, modelTypeId, tagId, campaignId, contactId, programDraftId, userDraftId, stationDraftId, programId, externalId, startMin, startMax, durationMin, durationMax, status, limit, orderBy, orderDirection, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all the items currently in your station. Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="broadcastId">Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="campaignId">Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="contactId">Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="programDraftId">Search on Program Draft ID *(Optional)* (optional)</param>
        /// <param name="userDraftId">Search on User Draft ID *(Optional)* (optional)</param>
        /// <param name="stationDraftId">Search on Station Draft ID *(Optional)* (optional)</param>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalId">Search on External ID *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="durationMin">Minimum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="durationMax">Maximum duration (seconds) *(Optional)* (optional)</param>
        /// <param name="status">Play Status of item *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListItemsAsyncWithHttpInfo (long? page = null, long? blockId = null, long? broadcastId = null, long? modelTypeId = null, long? tagId = null, long? campaignId = null, long? contactId = null, long? programDraftId = null, long? userDraftId = null, long? stationDraftId = null, long? programId = null, string externalId = null, DateTime? startMin = null, DateTime? startMax = null, int? durationMin = null, int? durationMax = null, string status = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (blockId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "block_id", blockId)); // query parameter
            if (broadcastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "broadcast_id", broadcastId)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag_id", tagId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaign_id", campaignId)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)); // query parameter
            if (programDraftId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "program_draft_id", programDraftId)); // query parameter
            if (userDraftId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_draft_id", userDraftId)); // query parameter
            if (stationDraftId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "station_draft_id", stationDraftId)); // query parameter
            if (programId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "program_id", programId)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_id", externalId)); // query parameter
            if (startMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-min", startMin)); // query parameter
            if (startMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-max", startMax)); // query parameter
            if (durationMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration-min", durationMin)); // query parameter
            if (durationMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duration-max", durationMax)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-direction", orderDirection)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Post a playlist, do not remove previously imported items Post a playlist, do not remove previously imported items
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        public Object PlaylistPostMerge (Object body = null)
        {
             ApiResponse<Object> localVarResponse = PlaylistPostMergeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a playlist, do not remove previously imported items Post a playlist, do not remove previously imported items
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PlaylistPostMergeWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/playlist/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaylistPostMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Post a playlist, do not remove previously imported items Post a playlist, do not remove previously imported items
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PlaylistPostMergeAsync (Object body = null)
        {
             ApiResponse<Object> localVarResponse = await PlaylistPostMergeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a playlist, do not remove previously imported items Post a playlist, do not remove previously imported items
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlaylistPostMergeAsyncWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/playlist/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaylistPostMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Post a playlist, keep current structure Post a playlist, keep current structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        public Object PlaylistPostStructure (Object body = null)
        {
             ApiResponse<Object> localVarResponse = PlaylistPostStructureWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a playlist, keep current structure Post a playlist, keep current structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PlaylistPostStructureWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/playlist/structure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaylistPostStructure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Post a playlist, keep current structure Post a playlist, keep current structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PlaylistPostStructureAsync (Object body = null)
        {
             ApiResponse<Object> localVarResponse = await PlaylistPostStructureAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a playlist, keep current structure Post a playlist, keep current structure
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlaylistPostStructureAsyncWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/playlist/structure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaylistPostStructure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Post a playlist Post a playlist
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Object</returns>
        public Object PlaylistPostTiming (Object body = null)
        {
             ApiResponse<Object> localVarResponse = PlaylistPostTimingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a playlist Post a playlist
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PlaylistPostTimingWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/playlist/timing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaylistPostTiming", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Post a playlist Post a playlist
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PlaylistPostTimingAsync (Object body = null)
        {
             ApiResponse<Object> localVarResponse = await PlaylistPostTimingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a playlist Post a playlist
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlaylistPostTimingAsyncWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/playlist/timing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaylistPostTiming", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Stop an Item Set a current playing or specific item on played
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        public Success StopCurrentItem (Object body = null)
        {
             ApiResponse<Success> localVarResponse = StopCurrentItemWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop an Item Set a current playing or specific item on played
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > StopCurrentItemWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/stopcurrent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopCurrentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Stop an Item Set a current playing or specific item on played
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> StopCurrentItemAsync (Object body = null)
        {
             ApiResponse<Success> localVarResponse = await StopCurrentItemAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop an Item Set a current playing or specific item on played
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> StopCurrentItemAsyncWithHttpInfo (Object body = null)
        {

            var localVarPath = "/items/stopcurrent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopCurrentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update extended item details by ID. Update item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        public Success UpdateItemById (long? id, ItemDataInput body = null)
        {
             ApiResponse<Success> localVarResponse = UpdateItemByIdWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update extended item details by ID. Update item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateItemByIdWithHttpInfo (long? id, ItemDataInput body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->UpdateItemById");

            var localVarPath = "/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update extended item details by ID. Update item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateItemByIdAsync (long? id, ItemDataInput body = null)
        {
             ApiResponse<Success> localVarResponse = await UpdateItemByIdAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update extended item details by ID. Update item by id.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Item **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateItemByIdAsyncWithHttpInfo (long? id, ItemDataInput body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ItemApi->UpdateItemById");

            var localVarPath = "/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Success) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

    }
}
