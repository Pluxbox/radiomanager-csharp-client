/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RadioManager.Client;
using RadioManager.Model;

namespace RadioManager.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create story.
        /// </summary>
        /// <remarks>
        /// Create story.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>PostSuccess</returns>
        PostSuccess CreateStory (StoryDataInput data);

        /// <summary>
        /// Create story.
        /// </summary>
        /// <remarks>
        /// Create story.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>ApiResponse of PostSuccess</returns>
        ApiResponse<PostSuccess> CreateStoryWithHttpInfo (StoryDataInput data);
        /// <summary>
        /// Delete story by id
        /// </summary>
        /// <remarks>
        /// Delete story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>Success</returns>
        Success DeleteStoryById (long? id);

        /// <summary>
        /// Delete story by id
        /// </summary>
        /// <remarks>
        /// Delete story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteStoryByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get story by id
        /// </summary>
        /// <remarks>
        /// Get story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>StoryResult</returns>
        StoryResult GetStoryById (long? id, long? externalStationId = null);

        /// <summary>
        /// Get story by id
        /// </summary>
        /// <remarks>
        /// Get story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of StoryResult</returns>
        ApiResponse<StoryResult> GetStoryByIdWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get all stories.
        /// </summary>
        /// <remarks>
        /// List all stories.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>StoryResults</returns>
        StoryResults ListStories (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null);

        /// <summary>
        /// Get all stories.
        /// </summary>
        /// <remarks>
        /// List all stories.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of StoryResults</returns>
        ApiResponse<StoryResults> ListStoriesWithHttpInfo (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null);
        /// <summary>
        /// Update story by id
        /// </summary>
        /// <remarks>
        /// Update story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        Success UpdateStoryByID (long? id, StoryDataInput data = null);

        /// <summary>
        /// Update story by id
        /// </summary>
        /// <remarks>
        /// Update story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateStoryByIDWithHttpInfo (long? id, StoryDataInput data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create story.
        /// </summary>
        /// <remarks>
        /// Create story.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of PostSuccess</returns>
        System.Threading.Tasks.Task<PostSuccess> CreateStoryAsync (StoryDataInput data);

        /// <summary>
        /// Create story.
        /// </summary>
        /// <remarks>
        /// Create story.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of ApiResponse (PostSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSuccess>> CreateStoryAsyncWithHttpInfo (StoryDataInput data);
        /// <summary>
        /// Delete story by id
        /// </summary>
        /// <remarks>
        /// Delete story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteStoryByIdAsync (long? id);

        /// <summary>
        /// Delete story by id
        /// </summary>
        /// <remarks>
        /// Delete story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteStoryByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get story by id
        /// </summary>
        /// <remarks>
        /// Get story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of StoryResult</returns>
        System.Threading.Tasks.Task<StoryResult> GetStoryByIdAsync (long? id, long? externalStationId = null);

        /// <summary>
        /// Get story by id
        /// </summary>
        /// <remarks>
        /// Get story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (StoryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoryResult>> GetStoryByIdAsyncWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get all stories.
        /// </summary>
        /// <remarks>
        /// List all stories.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of StoryResults</returns>
        System.Threading.Tasks.Task<StoryResults> ListStoriesAsync (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null);

        /// <summary>
        /// Get all stories.
        /// </summary>
        /// <remarks>
        /// List all stories.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (StoryResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoryResults>> ListStoriesAsyncWithHttpInfo (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null);
        /// <summary>
        /// Update story by id
        /// </summary>
        /// <remarks>
        /// Update story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateStoryByIDAsync (long? id, StoryDataInput data = null);

        /// <summary>
        /// Update story by id
        /// </summary>
        /// <remarks>
        /// Update story by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateStoryByIDAsyncWithHttpInfo (long? id, StoryDataInput data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoryApi : IStoryApi
    {
        private RadioManager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoryApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadioManager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create story. Create story.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>PostSuccess</returns>
        public PostSuccess CreateStory (StoryDataInput data)
        {
             ApiResponse<PostSuccess> localVarResponse = CreateStoryWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create story. Create story.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>ApiResponse of PostSuccess</returns>
        public ApiResponse< PostSuccess > CreateStoryWithHttpInfo (StoryDataInput data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling StoryApi->CreateStory");

            var localVarPath = "/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSuccess)));
        }

        /// <summary>
        /// Create story. Create story.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of PostSuccess</returns>
        public async System.Threading.Tasks.Task<PostSuccess> CreateStoryAsync (StoryDataInput data)
        {
             ApiResponse<PostSuccess> localVarResponse = await CreateStoryAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create story. Create story.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of ApiResponse (PostSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostSuccess>> CreateStoryAsyncWithHttpInfo (StoryDataInput data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling StoryApi->CreateStory");

            var localVarPath = "/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSuccess)));
        }

        /// <summary>
        /// Delete story by id Delete story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>Success</returns>
        public Success DeleteStoryById (long? id)
        {
             ApiResponse<Success> localVarResponse = DeleteStoryByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete story by id Delete story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteStoryByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoryApi->DeleteStoryById");

            var localVarPath = "/stories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete story by id Delete story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteStoryByIdAsync (long? id)
        {
             ApiResponse<Success> localVarResponse = await DeleteStoryByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete story by id Delete story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteStoryByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoryApi->DeleteStoryById");

            var localVarPath = "/stories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Get story by id Get story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>StoryResult</returns>
        public StoryResult GetStoryById (long? id, long? externalStationId = null)
        {
             ApiResponse<StoryResult> localVarResponse = GetStoryByIdWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get story by id Get story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of StoryResult</returns>
        public ApiResponse< StoryResult > GetStoryByIdWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoryApi->GetStoryById");

            var localVarPath = "/stories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoryResult)));
        }

        /// <summary>
        /// Get story by id Get story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of StoryResult</returns>
        public async System.Threading.Tasks.Task<StoryResult> GetStoryByIdAsync (long? id, long? externalStationId = null)
        {
             ApiResponse<StoryResult> localVarResponse = await GetStoryByIdAsyncWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get story by id Get story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (StoryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoryResult>> GetStoryByIdAsyncWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoryApi->GetStoryById");

            var localVarPath = "/stories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoryResult)));
        }

        /// <summary>
        /// Get all stories. List all stories.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>StoryResults</returns>
        public StoryResults ListStories (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null)
        {
             ApiResponse<StoryResults> localVarResponse = ListStoriesWithHttpInfo(page, modelTypeId, tagId, itemId, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all stories. List all stories.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of StoryResults</returns>
        public ApiResponse< StoryResults > ListStoriesWithHttpInfo (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null)
        {

            var localVarPath = "/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tag_id", tagId)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoryResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoryResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoryResults)));
        }

        /// <summary>
        /// Get all stories. List all stories.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of StoryResults</returns>
        public async System.Threading.Tasks.Task<StoryResults> ListStoriesAsync (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null)
        {
             ApiResponse<StoryResults> localVarResponse = await ListStoriesAsyncWithHttpInfo(page, modelTypeId, tagId, itemId, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all stories. List all stories.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (StoryResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoryResults>> ListStoriesAsyncWithHttpInfo (long? page = null, long? modelTypeId = null, long? tagId = null, long? itemId = null, long? externalStationId = null)
        {

            var localVarPath = "/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tag_id", tagId)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoryResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoryResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoryResults)));
        }

        /// <summary>
        /// Update story by id Update story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        public Success UpdateStoryByID (long? id, StoryDataInput data = null)
        {
             ApiResponse<Success> localVarResponse = UpdateStoryByIDWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update story by id Update story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateStoryByIDWithHttpInfo (long? id, StoryDataInput data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoryApi->UpdateStoryByID");

            var localVarPath = "/stories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoryByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update story by id Update story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateStoryByIDAsync (long? id, StoryDataInput data = null)
        {
             ApiResponse<Success> localVarResponse = await UpdateStoryByIDAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update story by id Update story by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Story **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateStoryByIDAsyncWithHttpInfo (long? id, StoryDataInput data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StoryApi->UpdateStoryByID");

            var localVarPath = "/stories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStoryByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

    }
}
