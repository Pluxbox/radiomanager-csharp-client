/* 
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RadioManager.Client;
using RadioManager.Model;

namespace RadioManager.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create campaign.
        /// </summary>
        /// <remarks>
        /// Create campaign.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>PostSuccess</returns>
        PostSuccess CreateCampaign (CampaignDataInput data);

        /// <summary>
        /// Create campaign.
        /// </summary>
        /// <remarks>
        /// Create campaign.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>ApiResponse of PostSuccess</returns>
        ApiResponse<PostSuccess> CreateCampaignWithHttpInfo (CampaignDataInput data);
        /// <summary>
        /// Delete campaign by id
        /// </summary>
        /// <remarks>
        /// Delete campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>Success</returns>
        Success DeleteCampaignById (long? id);

        /// <summary>
        /// Delete campaign by id
        /// </summary>
        /// <remarks>
        /// Delete campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteCampaignByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get campaign by id
        /// </summary>
        /// <remarks>
        /// Get campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>CampaignResult</returns>
        CampaignResult GetCampaignById (long? id, long? externalStationId = null);

        /// <summary>
        /// Get campaign by id
        /// </summary>
        /// <remarks>
        /// Get campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of CampaignResult</returns>
        ApiResponse<CampaignResult> GetCampaignByIdWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get all campaigns.
        /// </summary>
        /// <remarks>
        /// List all campaigns.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>CampaignResults</returns>
        CampaignResults ListCampaigns (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);

        /// <summary>
        /// Get all campaigns.
        /// </summary>
        /// <remarks>
        /// List all campaigns.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of CampaignResults</returns>
        ApiResponse<CampaignResults> ListCampaignsWithHttpInfo (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);
        /// <summary>
        /// Update campaign by id
        /// </summary>
        /// <remarks>
        /// Update campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        Success UpdateCampaignByID (long? id, CampaignDataInput data = null);

        /// <summary>
        /// Update campaign by id
        /// </summary>
        /// <remarks>
        /// Update campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateCampaignByIDWithHttpInfo (long? id, CampaignDataInput data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create campaign.
        /// </summary>
        /// <remarks>
        /// Create campaign.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of PostSuccess</returns>
        System.Threading.Tasks.Task<PostSuccess> CreateCampaignAsync (CampaignDataInput data);

        /// <summary>
        /// Create campaign.
        /// </summary>
        /// <remarks>
        /// Create campaign.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of ApiResponse (PostSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSuccess>> CreateCampaignAsyncWithHttpInfo (CampaignDataInput data);
        /// <summary>
        /// Delete campaign by id
        /// </summary>
        /// <remarks>
        /// Delete campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteCampaignByIdAsync (long? id);

        /// <summary>
        /// Delete campaign by id
        /// </summary>
        /// <remarks>
        /// Delete campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteCampaignByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get campaign by id
        /// </summary>
        /// <remarks>
        /// Get campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of CampaignResult</returns>
        System.Threading.Tasks.Task<CampaignResult> GetCampaignByIdAsync (long? id, long? externalStationId = null);

        /// <summary>
        /// Get campaign by id
        /// </summary>
        /// <remarks>
        /// Get campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (CampaignResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignResult>> GetCampaignByIdAsyncWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get all campaigns.
        /// </summary>
        /// <remarks>
        /// List all campaigns.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of CampaignResults</returns>
        System.Threading.Tasks.Task<CampaignResults> ListCampaignsAsync (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);

        /// <summary>
        /// Get all campaigns.
        /// </summary>
        /// <remarks>
        /// List all campaigns.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (CampaignResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignResults>> ListCampaignsAsyncWithHttpInfo (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);
        /// <summary>
        /// Update campaign by id
        /// </summary>
        /// <remarks>
        /// Update campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateCampaignByIDAsync (long? id, CampaignDataInput data = null);

        /// <summary>
        /// Update campaign by id
        /// </summary>
        /// <remarks>
        /// Update campaign by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateCampaignByIDAsyncWithHttpInfo (long? id, CampaignDataInput data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignApi : ICampaignApi
    {
        private RadioManager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadioManager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create campaign. Create campaign.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>PostSuccess</returns>
        public PostSuccess CreateCampaign (CampaignDataInput data)
        {
             ApiResponse<PostSuccess> localVarResponse = CreateCampaignWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create campaign. Create campaign.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>ApiResponse of PostSuccess</returns>
        public ApiResponse< PostSuccess > CreateCampaignWithHttpInfo (CampaignDataInput data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling CampaignApi->CreateCampaign");

            var localVarPath = "/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSuccess)));
        }

        /// <summary>
        /// Create campaign. Create campaign.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of PostSuccess</returns>
        public async System.Threading.Tasks.Task<PostSuccess> CreateCampaignAsync (CampaignDataInput data)
        {
             ApiResponse<PostSuccess> localVarResponse = await CreateCampaignAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create campaign. Create campaign.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Data **(Required)**</param>
        /// <returns>Task of ApiResponse (PostSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostSuccess>> CreateCampaignAsyncWithHttpInfo (CampaignDataInput data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling CampaignApi->CreateCampaign");

            var localVarPath = "/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostSuccess)));
        }

        /// <summary>
        /// Delete campaign by id Delete campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>Success</returns>
        public Success DeleteCampaignById (long? id)
        {
             ApiResponse<Success> localVarResponse = DeleteCampaignByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete campaign by id Delete campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteCampaignByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignApi->DeleteCampaignById");

            var localVarPath = "/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCampaignById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete campaign by id Delete campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteCampaignByIdAsync (long? id)
        {
             ApiResponse<Success> localVarResponse = await DeleteCampaignByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete campaign by id Delete campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteCampaignByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignApi->DeleteCampaignById");

            var localVarPath = "/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCampaignById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Get campaign by id Get campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>CampaignResult</returns>
        public CampaignResult GetCampaignById (long? id, long? externalStationId = null)
        {
             ApiResponse<CampaignResult> localVarResponse = GetCampaignByIdWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign by id Get campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of CampaignResult</returns>
        public ApiResponse< CampaignResult > GetCampaignByIdWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignApi->GetCampaignById");

            var localVarPath = "/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignResult)));
        }

        /// <summary>
        /// Get campaign by id Get campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of CampaignResult</returns>
        public async System.Threading.Tasks.Task<CampaignResult> GetCampaignByIdAsync (long? id, long? externalStationId = null)
        {
             ApiResponse<CampaignResult> localVarResponse = await GetCampaignByIdAsyncWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign by id Get campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (CampaignResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignResult>> GetCampaignByIdAsyncWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignApi->GetCampaignById");

            var localVarPath = "/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignResult)));
        }

        /// <summary>
        /// Get all campaigns. List all campaigns.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>CampaignResults</returns>
        public CampaignResults ListCampaigns (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {
             ApiResponse<CampaignResults> localVarResponse = ListCampaignsWithHttpInfo(page, itemId, modelTypeId, startMin, startMax, limit, orderBy, orderDirection, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all campaigns. List all campaigns.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of CampaignResults</returns>
        public ApiResponse< CampaignResults > ListCampaignsWithHttpInfo (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {

            var localVarPath = "/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (startMin != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start-min", startMin)); // query parameter
            if (startMax != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start-max", startMax)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order-by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order-direction", orderDirection)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignResults)));
        }

        /// <summary>
        /// Get all campaigns. List all campaigns.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of CampaignResults</returns>
        public async System.Threading.Tasks.Task<CampaignResults> ListCampaignsAsync (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {
             ApiResponse<CampaignResults> localVarResponse = await ListCampaignsAsyncWithHttpInfo(page, itemId, modelTypeId, startMin, startMax, limit, orderBy, orderDirection, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all campaigns. List all campaigns.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page *(Optional)* (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (CampaignResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignResults>> ListCampaignsAsyncWithHttpInfo (long? page = null, long? itemId = null, long? modelTypeId = null, DateTime? startMin = null, DateTime? startMax = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {

            var localVarPath = "/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (startMin != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start-min", startMin)); // query parameter
            if (startMax != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start-max", startMax)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order-by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order-direction", orderDirection)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignResults)));
        }

        /// <summary>
        /// Update campaign by id Update campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Success</returns>
        public Success UpdateCampaignByID (long? id, CampaignDataInput data = null)
        {
             ApiResponse<Success> localVarResponse = UpdateCampaignByIDWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update campaign by id Update campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateCampaignByIDWithHttpInfo (long? id, CampaignDataInput data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignApi->UpdateCampaignByID");

            var localVarPath = "/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update campaign by id Update campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateCampaignByIDAsync (long? id, CampaignDataInput data = null)
        {
             ApiResponse<Success> localVarResponse = await UpdateCampaignByIDAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update campaign by id Update campaign by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Campaign **(Required)**</param>
        /// <param name="data">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateCampaignByIDAsyncWithHttpInfo (long? id, CampaignDataInput data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignApi->UpdateCampaignByID");

            var localVarPath = "/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (API Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

    }
}
