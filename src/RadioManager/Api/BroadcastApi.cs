/* 
 * RadioManager
 *
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RadioManager.Client;
using RadioManager.Model;

namespace RadioManager.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBroadcastApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create broadcast.
        /// </summary>
        /// <remarks>
        /// Create broadcast.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CreateBroadcast (BroadcastDataInput body);

        /// <summary>
        /// Create broadcast.
        /// </summary>
        /// <remarks>
        /// Create broadcast.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CreateBroadcastWithHttpInfo (BroadcastDataInput body);
        /// <summary>
        /// Delete broadcast by id
        /// </summary>
        /// <remarks>
        /// Delete broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 DeleteBroadcastById (long? id);

        /// <summary>
        /// Delete broadcast by id
        /// </summary>
        /// <remarks>
        /// Delete broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> DeleteBroadcastByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get broadcast by id
        /// </summary>
        /// <remarks>
        /// Get broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>BroadcastResult</returns>
        BroadcastResult GetBroadcastById (long? id, long? externalStationId = null);

        /// <summary>
        /// Get broadcast by id
        /// </summary>
        /// <remarks>
        /// Get broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of BroadcastResult</returns>
        ApiResponse<BroadcastResult> GetBroadcastByIdWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get current Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently playing Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>BroadcastResult</returns>
        BroadcastResult GetCurrentBroadcast (bool? withunpublished = null);

        /// <summary>
        /// Get current Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently playing Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of BroadcastResult</returns>
        ApiResponse<BroadcastResult> GetCurrentBroadcastWithHttpInfo (bool? withunpublished = null);
        /// <summary>
        /// Get daily EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 1 day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>EPGResults</returns>
        EPGResults GetDailyEPG (DateTime? date = null, bool? withunpublished = null);

        /// <summary>
        /// Get daily EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 1 day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of EPGResults</returns>
        ApiResponse<EPGResults> GetDailyEPGWithHttpInfo (DateTime? date = null, bool? withunpublished = null);
        /// <summary>
        /// Get EPG by date
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>EPGResults</returns>
        EPGResults GetEPGByDate (DateTime? date = null, bool? withunpublished = null);

        /// <summary>
        /// Get EPG by date
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of EPGResults</returns>
        ApiResponse<EPGResults> GetEPGByDateWithHttpInfo (DateTime? date = null, bool? withunpublished = null);
        /// <summary>
        /// Get next Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently upcoming Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>BroadcastResult</returns>
        BroadcastResult GetNextBroadcast (bool? withunpublished = null);

        /// <summary>
        /// Get next Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently upcoming Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of BroadcastResult</returns>
        ApiResponse<BroadcastResult> GetNextBroadcastWithHttpInfo (bool? withunpublished = null);
        /// <summary>
        /// Get weekly EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>EPGResults</returns>
        EPGResults GetWeeklyEPG (DateTime? date = null, bool? withunpublished = null);

        /// <summary>
        /// Get weekly EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of EPGResults</returns>
        ApiResponse<EPGResults> GetWeeklyEPGWithHttpInfo (DateTime? date = null, bool? withunpublished = null);
        /// <summary>
        /// Get all broadcasts.
        /// </summary>
        /// <remarks>
        /// List all broadcasts.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ListBroadcasts (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);

        /// <summary>
        /// Get all broadcasts.
        /// </summary>
        /// <remarks>
        /// List all broadcasts.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ListBroadcastsWithHttpInfo (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);
        /// <summary>
        /// Print broadcast by id with template
        /// </summary>
        /// <remarks>
        /// Download a rundown in printable format as HTML inside the JSON repsonse
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PrintBroadcastById (long? id, long? templateId = null);

        /// <summary>
        /// Print broadcast by id with template
        /// </summary>
        /// <remarks>
        /// Download a rundown in printable format as HTML inside the JSON repsonse
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PrintBroadcastByIdWithHttpInfo (long? id, long? templateId = null);
        /// <summary>
        /// Update broadcast by id
        /// </summary>
        /// <remarks>
        /// Update broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 UpdateBroadcastByID (long? id, BroadcastDataInput body = null);

        /// <summary>
        /// Update broadcast by id
        /// </summary>
        /// <remarks>
        /// Update broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> UpdateBroadcastByIDWithHttpInfo (long? id, BroadcastDataInput body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create broadcast.
        /// </summary>
        /// <remarks>
        /// Create broadcast.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CreateBroadcastAsync (BroadcastDataInput body);

        /// <summary>
        /// Create broadcast.
        /// </summary>
        /// <remarks>
        /// Create broadcast.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CreateBroadcastAsyncWithHttpInfo (BroadcastDataInput body);
        /// <summary>
        /// Delete broadcast by id
        /// </summary>
        /// <remarks>
        /// Delete broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> DeleteBroadcastByIdAsync (long? id);

        /// <summary>
        /// Delete broadcast by id
        /// </summary>
        /// <remarks>
        /// Delete broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteBroadcastByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get broadcast by id
        /// </summary>
        /// <remarks>
        /// Get broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of BroadcastResult</returns>
        System.Threading.Tasks.Task<BroadcastResult> GetBroadcastByIdAsync (long? id, long? externalStationId = null);

        /// <summary>
        /// Get broadcast by id
        /// </summary>
        /// <remarks>
        /// Get broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (BroadcastResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BroadcastResult>> GetBroadcastByIdAsyncWithHttpInfo (long? id, long? externalStationId = null);
        /// <summary>
        /// Get current Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently playing Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of BroadcastResult</returns>
        System.Threading.Tasks.Task<BroadcastResult> GetCurrentBroadcastAsync (bool? withunpublished = null);

        /// <summary>
        /// Get current Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently playing Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (BroadcastResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BroadcastResult>> GetCurrentBroadcastAsyncWithHttpInfo (bool? withunpublished = null);
        /// <summary>
        /// Get daily EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 1 day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of EPGResults</returns>
        System.Threading.Tasks.Task<EPGResults> GetDailyEPGAsync (DateTime? date = null, bool? withunpublished = null);

        /// <summary>
        /// Get daily EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 1 day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (EPGResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<EPGResults>> GetDailyEPGAsyncWithHttpInfo (DateTime? date = null, bool? withunpublished = null);
        /// <summary>
        /// Get EPG by date
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of EPGResults</returns>
        System.Threading.Tasks.Task<EPGResults> GetEPGByDateAsync (DateTime? date = null, bool? withunpublished = null);

        /// <summary>
        /// Get EPG by date
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (EPGResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<EPGResults>> GetEPGByDateAsyncWithHttpInfo (DateTime? date = null, bool? withunpublished = null);
        /// <summary>
        /// Get next Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently upcoming Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of BroadcastResult</returns>
        System.Threading.Tasks.Task<BroadcastResult> GetNextBroadcastAsync (bool? withunpublished = null);

        /// <summary>
        /// Get next Broadcast
        /// </summary>
        /// <remarks>
        /// Get currently upcoming Broadcast
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (BroadcastResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BroadcastResult>> GetNextBroadcastAsyncWithHttpInfo (bool? withunpublished = null);
        /// <summary>
        /// Get weekly EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of EPGResults</returns>
        System.Threading.Tasks.Task<EPGResults> GetWeeklyEPGAsync (DateTime? date = null, bool? withunpublished = null);

        /// <summary>
        /// Get weekly EPG
        /// </summary>
        /// <remarks>
        /// Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (EPGResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<EPGResults>> GetWeeklyEPGAsyncWithHttpInfo (DateTime? date = null, bool? withunpublished = null);
        /// <summary>
        /// Get all broadcasts.
        /// </summary>
        /// <remarks>
        /// List all broadcasts.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ListBroadcastsAsync (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);

        /// <summary>
        /// Get all broadcasts.
        /// </summary>
        /// <remarks>
        /// List all broadcasts.
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ListBroadcastsAsyncWithHttpInfo (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null);
        /// <summary>
        /// Print broadcast by id with template
        /// </summary>
        /// <remarks>
        /// Download a rundown in printable format as HTML inside the JSON repsonse
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PrintBroadcastByIdAsync (long? id, long? templateId = null);

        /// <summary>
        /// Print broadcast by id with template
        /// </summary>
        /// <remarks>
        /// Download a rundown in printable format as HTML inside the JSON repsonse
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PrintBroadcastByIdAsyncWithHttpInfo (long? id, long? templateId = null);
        /// <summary>
        /// Update broadcast by id
        /// </summary>
        /// <remarks>
        /// Update broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> UpdateBroadcastByIDAsync (long? id, BroadcastDataInput body = null);

        /// <summary>
        /// Update broadcast by id
        /// </summary>
        /// <remarks>
        /// Update broadcast by id
        /// </remarks>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> UpdateBroadcastByIDAsyncWithHttpInfo (long? id, BroadcastDataInput body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BroadcastApi : IBroadcastApi
    {
        private RadioManager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BroadcastApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BroadcastApi(String basePath)
        {
            this.Configuration = new RadioManager.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BroadcastApi"/> class
        /// </summary>
        /// <returns></returns>
        public BroadcastApi()
        {
            this.Configuration = RadioManager.Client.Configuration.Default;

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BroadcastApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BroadcastApi(RadioManager.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RadioManager.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RadioManager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RadioManager.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadioManager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create broadcast. Create broadcast.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CreateBroadcast (BroadcastDataInput body)
        {
             ApiResponse<InlineResponse2002> localVarResponse = CreateBroadcastWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create broadcast. Create broadcast.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > CreateBroadcastWithHttpInfo (BroadcastDataInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BroadcastApi->CreateBroadcast");

            var localVarPath = "/broadcasts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBroadcast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Create broadcast. Create broadcast.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CreateBroadcastAsync (BroadcastDataInput body)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await CreateBroadcastAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create broadcast. Create broadcast.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data **(Required)**</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CreateBroadcastAsyncWithHttpInfo (BroadcastDataInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BroadcastApi->CreateBroadcast");

            var localVarPath = "/broadcasts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBroadcast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Delete broadcast by id Delete broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 DeleteBroadcastById (long? id)
        {
             ApiResponse<InlineResponse202> localVarResponse = DeleteBroadcastByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete broadcast by id Delete broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse< InlineResponse202 > DeleteBroadcastByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->DeleteBroadcastById");

            var localVarPath = "/broadcasts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBroadcastById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

        /// <summary>
        /// Delete broadcast by id Delete broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> DeleteBroadcastByIdAsync (long? id)
        {
             ApiResponse<InlineResponse202> localVarResponse = await DeleteBroadcastByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete broadcast by id Delete broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteBroadcastByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->DeleteBroadcastById");

            var localVarPath = "/broadcasts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBroadcastById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

        /// <summary>
        /// Get broadcast by id Get broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>BroadcastResult</returns>
        public BroadcastResult GetBroadcastById (long? id, long? externalStationId = null)
        {
             ApiResponse<BroadcastResult> localVarResponse = GetBroadcastByIdWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get broadcast by id Get broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of BroadcastResult</returns>
        public ApiResponse< BroadcastResult > GetBroadcastByIdWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->GetBroadcastById");

            var localVarPath = "/broadcasts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBroadcastById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastResult)));
        }

        /// <summary>
        /// Get broadcast by id Get broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of BroadcastResult</returns>
        public async System.Threading.Tasks.Task<BroadcastResult> GetBroadcastByIdAsync (long? id, long? externalStationId = null)
        {
             ApiResponse<BroadcastResult> localVarResponse = await GetBroadcastByIdAsyncWithHttpInfo(id, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get broadcast by id Get broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (BroadcastResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BroadcastResult>> GetBroadcastByIdAsyncWithHttpInfo (long? id, long? externalStationId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->GetBroadcastById");

            var localVarPath = "/broadcasts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBroadcastById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastResult)));
        }

        /// <summary>
        /// Get current Broadcast Get currently playing Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>BroadcastResult</returns>
        public BroadcastResult GetCurrentBroadcast (bool? withunpublished = null)
        {
             ApiResponse<BroadcastResult> localVarResponse = GetCurrentBroadcastWithHttpInfo(withunpublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current Broadcast Get currently playing Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of BroadcastResult</returns>
        public ApiResponse< BroadcastResult > GetCurrentBroadcastWithHttpInfo (bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentBroadcast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastResult)));
        }

        /// <summary>
        /// Get current Broadcast Get currently playing Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of BroadcastResult</returns>
        public async System.Threading.Tasks.Task<BroadcastResult> GetCurrentBroadcastAsync (bool? withunpublished = null)
        {
             ApiResponse<BroadcastResult> localVarResponse = await GetCurrentBroadcastAsyncWithHttpInfo(withunpublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current Broadcast Get currently playing Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (BroadcastResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BroadcastResult>> GetCurrentBroadcastAsyncWithHttpInfo (bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentBroadcast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastResult)));
        }

        /// <summary>
        /// Get daily EPG Get a list of broadcasts as Programming guide for 1 day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>EPGResults</returns>
        public EPGResults GetDailyEPG (DateTime? date = null, bool? withunpublished = null)
        {
             ApiResponse<EPGResults> localVarResponse = GetDailyEPGWithHttpInfo(date, withunpublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get daily EPG Get a list of broadcasts as Programming guide for 1 day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of EPGResults</returns>
        public ApiResponse< EPGResults > GetDailyEPGWithHttpInfo (DateTime? date = null, bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/epg/daily";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDailyEPG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EPGResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EPGResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EPGResults)));
        }

        /// <summary>
        /// Get daily EPG Get a list of broadcasts as Programming guide for 1 day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of EPGResults</returns>
        public async System.Threading.Tasks.Task<EPGResults> GetDailyEPGAsync (DateTime? date = null, bool? withunpublished = null)
        {
             ApiResponse<EPGResults> localVarResponse = await GetDailyEPGAsyncWithHttpInfo(date, withunpublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get daily EPG Get a list of broadcasts as Programming guide for 1 day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (EPGResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EPGResults>> GetDailyEPGAsyncWithHttpInfo (DateTime? date = null, bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/epg/daily";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDailyEPG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EPGResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EPGResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EPGResults)));
        }

        /// <summary>
        /// Get EPG by date Get a list of broadcasts as Programming guide, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>EPGResults</returns>
        public EPGResults GetEPGByDate (DateTime? date = null, bool? withunpublished = null)
        {
             ApiResponse<EPGResults> localVarResponse = GetEPGByDateWithHttpInfo(date, withunpublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get EPG by date Get a list of broadcasts as Programming guide, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of EPGResults</returns>
        public ApiResponse< EPGResults > GetEPGByDateWithHttpInfo (DateTime? date = null, bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/epg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEPGByDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EPGResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EPGResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EPGResults)));
        }

        /// <summary>
        /// Get EPG by date Get a list of broadcasts as Programming guide, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of EPGResults</returns>
        public async System.Threading.Tasks.Task<EPGResults> GetEPGByDateAsync (DateTime? date = null, bool? withunpublished = null)
        {
             ApiResponse<EPGResults> localVarResponse = await GetEPGByDateAsyncWithHttpInfo(date, withunpublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get EPG by date Get a list of broadcasts as Programming guide, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (EPGResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EPGResults>> GetEPGByDateAsyncWithHttpInfo (DateTime? date = null, bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/epg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEPGByDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EPGResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EPGResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EPGResults)));
        }

        /// <summary>
        /// Get next Broadcast Get currently upcoming Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>BroadcastResult</returns>
        public BroadcastResult GetNextBroadcast (bool? withunpublished = null)
        {
             ApiResponse<BroadcastResult> localVarResponse = GetNextBroadcastWithHttpInfo(withunpublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next Broadcast Get currently upcoming Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of BroadcastResult</returns>
        public ApiResponse< BroadcastResult > GetNextBroadcastWithHttpInfo (bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNextBroadcast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastResult)));
        }

        /// <summary>
        /// Get next Broadcast Get currently upcoming Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of BroadcastResult</returns>
        public async System.Threading.Tasks.Task<BroadcastResult> GetNextBroadcastAsync (bool? withunpublished = null)
        {
             ApiResponse<BroadcastResult> localVarResponse = await GetNextBroadcastAsyncWithHttpInfo(withunpublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next Broadcast Get currently upcoming Broadcast
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (BroadcastResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BroadcastResult>> GetNextBroadcastAsyncWithHttpInfo (bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNextBroadcast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastResult)));
        }

        /// <summary>
        /// Get weekly EPG Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>EPGResults</returns>
        public EPGResults GetWeeklyEPG (DateTime? date = null, bool? withunpublished = null)
        {
             ApiResponse<EPGResults> localVarResponse = GetWeeklyEPGWithHttpInfo(date, withunpublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get weekly EPG Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>ApiResponse of EPGResults</returns>
        public ApiResponse< EPGResults > GetWeeklyEPGWithHttpInfo (DateTime? date = null, bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/epg/weekly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWeeklyEPG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EPGResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EPGResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EPGResults)));
        }

        /// <summary>
        /// Get weekly EPG Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of EPGResults</returns>
        public async System.Threading.Tasks.Task<EPGResults> GetWeeklyEPGAsync (DateTime? date = null, bool? withunpublished = null)
        {
             ApiResponse<EPGResults> localVarResponse = await GetWeeklyEPGAsyncWithHttpInfo(date, withunpublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get weekly EPG Get a list of broadcasts as Programming guide for 7 days, seperated per day
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date *(Optional)* (optional)</param>
        /// <param name="withunpublished">Show Unpublished *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (EPGResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EPGResults>> GetWeeklyEPGAsyncWithHttpInfo (DateTime? date = null, bool? withunpublished = null)
        {

            var localVarPath = "/broadcasts/epg/weekly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (withunpublished != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withunpublished", withunpublished)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWeeklyEPG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EPGResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EPGResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EPGResults)));
        }

        /// <summary>
        /// Get all broadcasts. List all broadcasts.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ListBroadcasts (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = ListBroadcastsWithHttpInfo(programId, blockId, modelTypeId, tagId, presenterId, genreId, groupId, itemId, plannedInEpg, startMin, startMax, page, limit, orderBy, orderDirection, externalStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all broadcasts. List all broadcasts.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > ListBroadcastsWithHttpInfo (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {

            var localVarPath = "/broadcasts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "program_id", programId)); // query parameter
            if (blockId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "block_id", blockId)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag_id", tagId)); // query parameter
            if (presenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "presenter_id", presenterId)); // query parameter
            if (genreId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "genre_id", genreId)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_id", groupId)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (plannedInEpg != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "planned_in_epg", plannedInEpg)); // query parameter
            if (startMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-min", startMin)); // query parameter
            if (startMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-max", startMax)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-direction", orderDirection)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBroadcasts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get all broadcasts. List all broadcasts.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ListBroadcastsAsync (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ListBroadcastsAsyncWithHttpInfo(programId, blockId, modelTypeId, tagId, presenterId, genreId, groupId, itemId, plannedInEpg, startMin, startMax, page, limit, orderBy, orderDirection, externalStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all broadcasts. List all broadcasts.
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="blockId">Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="modelTypeId">Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="tagId">Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="presenterId">Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="genreId">Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="groupId">Search on Group ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="itemId">Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)</param>
        /// <param name="plannedInEpg">Checks if item is in EPG *(Optional)* (optional)</param>
        /// <param name="startMin">Minimum start date *(Optional)* (optional)</param>
        /// <param name="startMax">Maximum start date *(Optional)* (optional)</param>
        /// <param name="page">Current page *(Optional)* (optional, default to 1)</param>
        /// <param name="limit">Results per page *(Optional)* (optional)</param>
        /// <param name="orderBy">Field to order the results *(Optional)* (optional)</param>
        /// <param name="orderDirection">Direction of ordering *(Optional)* (optional)</param>
        /// <param name="externalStationId">Query on a different (content providing) station *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ListBroadcastsAsyncWithHttpInfo (long? programId = null, long? blockId = null, long? modelTypeId = null, long? tagId = null, long? presenterId = null, long? genreId = null, long? groupId = null, long? itemId = null, long? plannedInEpg = null, DateTime? startMin = null, DateTime? startMax = null, long? page = null, long? limit = null, string orderBy = null, string orderDirection = null, long? externalStationId = null)
        {

            var localVarPath = "/broadcasts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "program_id", programId)); // query parameter
            if (blockId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "block_id", blockId)); // query parameter
            if (modelTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "model_type_id", modelTypeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag_id", tagId)); // query parameter
            if (presenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "presenter_id", presenterId)); // query parameter
            if (genreId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "genre_id", genreId)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_id", groupId)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (plannedInEpg != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "planned_in_epg", plannedInEpg)); // query parameter
            if (startMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-min", startMin)); // query parameter
            if (startMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-max", startMax)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-by", orderBy)); // query parameter
            if (orderDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order-direction", orderDirection)); // query parameter
            if (externalStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_external_station_id", externalStationId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBroadcasts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Print broadcast by id with template Download a rundown in printable format as HTML inside the JSON repsonse
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PrintBroadcastById (long? id, long? templateId = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = PrintBroadcastByIdWithHttpInfo(id, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Print broadcast by id with template Download a rundown in printable format as HTML inside the JSON repsonse
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > PrintBroadcastByIdWithHttpInfo (long? id, long? templateId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->PrintBroadcastById");

            var localVarPath = "/broadcasts/print/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "template_id", templateId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrintBroadcastById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Print broadcast by id with template Download a rundown in printable format as HTML inside the JSON repsonse
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> PrintBroadcastByIdAsync (long? id, long? templateId = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await PrintBroadcastByIdAsyncWithHttpInfo(id, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Print broadcast by id with template Download a rundown in printable format as HTML inside the JSON repsonse
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="templateId">The print template to be used *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PrintBroadcastByIdAsyncWithHttpInfo (long? id, long? templateId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->PrintBroadcastById");

            var localVarPath = "/broadcasts/print/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "template_id", templateId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrintBroadcastById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Update broadcast by id Update broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 UpdateBroadcastByID (long? id, BroadcastDataInput body = null)
        {
             ApiResponse<InlineResponse202> localVarResponse = UpdateBroadcastByIDWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update broadcast by id Update broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse< InlineResponse202 > UpdateBroadcastByIDWithHttpInfo (long? id, BroadcastDataInput body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->UpdateBroadcastByID");

            var localVarPath = "/broadcasts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBroadcastByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

        /// <summary>
        /// Update broadcast by id Update broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> UpdateBroadcastByIDAsync (long? id, BroadcastDataInput body = null)
        {
             ApiResponse<InlineResponse202> localVarResponse = await UpdateBroadcastByIDAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update broadcast by id Update broadcast by id
        /// </summary>
        /// <exception cref="RadioManager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Broadcast **(Required)**</param>
        /// <param name="body">Data *(Optional)* (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> UpdateBroadcastByIDAsyncWithHttpInfo (long? id, BroadcastDataInput body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BroadcastApi->UpdateBroadcastByID");

            var localVarPath = "/broadcasts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBroadcastByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

    }
}
